// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agricoladb/ent/card"
	"agricoladb/ent/cardspecialcolor"
	"agricoladb/ent/cardtype"
	"agricoladb/ent/deck"
	"agricoladb/ent/predicate"
	"agricoladb/ent/product"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPrintedID sets the "printed_id" field.
func (cu *CardUpdate) SetPrintedID(s string) *CardUpdate {
	cu.mutation.SetPrintedID(s)
	return cu
}

// SetNillablePrintedID sets the "printed_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillablePrintedID(s *string) *CardUpdate {
	if s != nil {
		cu.SetPrintedID(*s)
	}
	return cu
}

// ClearPrintedID clears the value of the "printed_id" field.
func (cu *CardUpdate) ClearPrintedID() *CardUpdate {
	cu.mutation.ClearPrintedID()
	return cu
}

// SetPlayAgricolaCardID sets the "play_agricola_card_id" field.
func (cu *CardUpdate) SetPlayAgricolaCardID(s string) *CardUpdate {
	cu.mutation.SetPlayAgricolaCardID(s)
	return cu
}

// SetNillablePlayAgricolaCardID sets the "play_agricola_card_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillablePlayAgricolaCardID(s *string) *CardUpdate {
	if s != nil {
		cu.SetPlayAgricolaCardID(*s)
	}
	return cu
}

// ClearPlayAgricolaCardID clears the value of the "play_agricola_card_id" field.
func (cu *CardUpdate) ClearPlayAgricolaCardID() *CardUpdate {
	cu.mutation.ClearPlayAgricolaCardID()
	return cu
}

// SetDeckID sets the "deck_id" field.
func (cu *CardUpdate) SetDeckID(i int) *CardUpdate {
	cu.mutation.SetDeckID(i)
	return cu
}

// SetNillableDeckID sets the "deck_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillableDeckID(i *int) *CardUpdate {
	if i != nil {
		cu.SetDeckID(*i)
	}
	return cu
}

// ClearDeckID clears the value of the "deck_id" field.
func (cu *CardUpdate) ClearDeckID() *CardUpdate {
	cu.mutation.ClearDeckID()
	return cu
}

// SetCardTypeID sets the "card_type_id" field.
func (cu *CardUpdate) SetCardTypeID(i int) *CardUpdate {
	cu.mutation.SetCardTypeID(i)
	return cu
}

// SetCardSpecialColorID sets the "card_special_color_id" field.
func (cu *CardUpdate) SetCardSpecialColorID(i int) *CardUpdate {
	cu.mutation.SetCardSpecialColorID(i)
	return cu
}

// SetNillableCardSpecialColorID sets the "card_special_color_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillableCardSpecialColorID(i *int) *CardUpdate {
	if i != nil {
		cu.SetCardSpecialColorID(*i)
	}
	return cu
}

// ClearCardSpecialColorID clears the value of the "card_special_color_id" field.
func (cu *CardUpdate) ClearCardSpecialColorID() *CardUpdate {
	cu.mutation.ClearCardSpecialColorID()
	return cu
}

// SetNameJa sets the "name_ja" field.
func (cu *CardUpdate) SetNameJa(s string) *CardUpdate {
	cu.mutation.SetNameJa(s)
	return cu
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (cu *CardUpdate) SetNillableNameJa(s *string) *CardUpdate {
	if s != nil {
		cu.SetNameJa(*s)
	}
	return cu
}

// ClearNameJa clears the value of the "name_ja" field.
func (cu *CardUpdate) ClearNameJa() *CardUpdate {
	cu.mutation.ClearNameJa()
	return cu
}

// SetNameEn sets the "name_en" field.
func (cu *CardUpdate) SetNameEn(s string) *CardUpdate {
	cu.mutation.SetNameEn(s)
	return cu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (cu *CardUpdate) SetNillableNameEn(s *string) *CardUpdate {
	if s != nil {
		cu.SetNameEn(*s)
	}
	return cu
}

// ClearNameEn clears the value of the "name_en" field.
func (cu *CardUpdate) ClearNameEn() *CardUpdate {
	cu.mutation.ClearNameEn()
	return cu
}

// SetMinPlayersNumber sets the "min_players_number" field.
func (cu *CardUpdate) SetMinPlayersNumber(i int) *CardUpdate {
	cu.mutation.ResetMinPlayersNumber()
	cu.mutation.SetMinPlayersNumber(i)
	return cu
}

// SetNillableMinPlayersNumber sets the "min_players_number" field if the given value is not nil.
func (cu *CardUpdate) SetNillableMinPlayersNumber(i *int) *CardUpdate {
	if i != nil {
		cu.SetMinPlayersNumber(*i)
	}
	return cu
}

// AddMinPlayersNumber adds i to the "min_players_number" field.
func (cu *CardUpdate) AddMinPlayersNumber(i int) *CardUpdate {
	cu.mutation.AddMinPlayersNumber(i)
	return cu
}

// ClearMinPlayersNumber clears the value of the "min_players_number" field.
func (cu *CardUpdate) ClearMinPlayersNumber() *CardUpdate {
	cu.mutation.ClearMinPlayersNumber()
	return cu
}

// SetPrerequisite sets the "prerequisite" field.
func (cu *CardUpdate) SetPrerequisite(s string) *CardUpdate {
	cu.mutation.SetPrerequisite(s)
	return cu
}

// SetNillablePrerequisite sets the "prerequisite" field if the given value is not nil.
func (cu *CardUpdate) SetNillablePrerequisite(s *string) *CardUpdate {
	if s != nil {
		cu.SetPrerequisite(*s)
	}
	return cu
}

// ClearPrerequisite clears the value of the "prerequisite" field.
func (cu *CardUpdate) ClearPrerequisite() *CardUpdate {
	cu.mutation.ClearPrerequisite()
	return cu
}

// SetCost sets the "cost" field.
func (cu *CardUpdate) SetCost(s string) *CardUpdate {
	cu.mutation.SetCost(s)
	return cu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (cu *CardUpdate) SetNillableCost(s *string) *CardUpdate {
	if s != nil {
		cu.SetCost(*s)
	}
	return cu
}

// ClearCost clears the value of the "cost" field.
func (cu *CardUpdate) ClearCost() *CardUpdate {
	cu.mutation.ClearCost()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CardUpdate) SetDescription(s string) *CardUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CardUpdate) SetNillableDescription(s *string) *CardUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CardUpdate) ClearDescription() *CardUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetNote sets the "note" field.
func (cu *CardUpdate) SetNote(s string) *CardUpdate {
	cu.mutation.SetNote(s)
	return cu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (cu *CardUpdate) SetNillableNote(s *string) *CardUpdate {
	if s != nil {
		cu.SetNote(*s)
	}
	return cu
}

// ClearNote clears the value of the "note" field.
func (cu *CardUpdate) ClearNote() *CardUpdate {
	cu.mutation.ClearNote()
	return cu
}

// SetIsOfficialJa sets the "is_official_ja" field.
func (cu *CardUpdate) SetIsOfficialJa(b bool) *CardUpdate {
	cu.mutation.SetIsOfficialJa(b)
	return cu
}

// SetVictoryPoint sets the "victory_point" field.
func (cu *CardUpdate) SetVictoryPoint(i int) *CardUpdate {
	cu.mutation.ResetVictoryPoint()
	cu.mutation.SetVictoryPoint(i)
	return cu
}

// SetNillableVictoryPoint sets the "victory_point" field if the given value is not nil.
func (cu *CardUpdate) SetNillableVictoryPoint(i *int) *CardUpdate {
	if i != nil {
		cu.SetVictoryPoint(*i)
	}
	return cu
}

// AddVictoryPoint adds i to the "victory_point" field.
func (cu *CardUpdate) AddVictoryPoint(i int) *CardUpdate {
	cu.mutation.AddVictoryPoint(i)
	return cu
}

// ClearVictoryPoint clears the value of the "victory_point" field.
func (cu *CardUpdate) ClearVictoryPoint() *CardUpdate {
	cu.mutation.ClearVictoryPoint()
	return cu
}

// SetSpecialVictoryPoint sets the "special_victory_point" field.
func (cu *CardUpdate) SetSpecialVictoryPoint(s string) *CardUpdate {
	cu.mutation.SetSpecialVictoryPoint(s)
	return cu
}

// SetNillableSpecialVictoryPoint sets the "special_victory_point" field if the given value is not nil.
func (cu *CardUpdate) SetNillableSpecialVictoryPoint(s *string) *CardUpdate {
	if s != nil {
		cu.SetSpecialVictoryPoint(*s)
	}
	return cu
}

// ClearSpecialVictoryPoint clears the value of the "special_victory_point" field.
func (cu *CardUpdate) ClearSpecialVictoryPoint() *CardUpdate {
	cu.mutation.ClearSpecialVictoryPoint()
	return cu
}

// SetHasArrow sets the "has_arrow" field.
func (cu *CardUpdate) SetHasArrow(b bool) *CardUpdate {
	cu.mutation.SetHasArrow(b)
	return cu
}

// SetHasBonusPointIcon sets the "has_bonus_point_icon" field.
func (cu *CardUpdate) SetHasBonusPointIcon(b bool) *CardUpdate {
	cu.mutation.SetHasBonusPointIcon(b)
	return cu
}

// SetHasNegativeBonusPointIcon sets the "has_negative_bonus_point_icon" field.
func (cu *CardUpdate) SetHasNegativeBonusPointIcon(b bool) *CardUpdate {
	cu.mutation.SetHasNegativeBonusPointIcon(b)
	return cu
}

// SetHasPanIcon sets the "has_pan_icon" field.
func (cu *CardUpdate) SetHasPanIcon(b bool) *CardUpdate {
	cu.mutation.SetHasPanIcon(b)
	return cu
}

// SetHasBreadIcon sets the "has_bread_icon" field.
func (cu *CardUpdate) SetHasBreadIcon(b bool) *CardUpdate {
	cu.mutation.SetHasBreadIcon(b)
	return cu
}

// SetHasFarmPlannerIcon sets the "has_farm_planner_icon" field.
func (cu *CardUpdate) SetHasFarmPlannerIcon(b bool) *CardUpdate {
	cu.mutation.SetHasFarmPlannerIcon(b)
	return cu
}

// SetHasActionsBoosterIcon sets the "has_actions_booster_icon" field.
func (cu *CardUpdate) SetHasActionsBoosterIcon(b bool) *CardUpdate {
	cu.mutation.SetHasActionsBoosterIcon(b)
	return cu
}

// SetHasPointsProviderIcon sets the "has_points_provider_icon" field.
func (cu *CardUpdate) SetHasPointsProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasPointsProviderIcon(b)
	return cu
}

// SetHasGoodsProviderIcon sets the "has_goods_provider_icon" field.
func (cu *CardUpdate) SetHasGoodsProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasGoodsProviderIcon(b)
	return cu
}

// SetHasFoodProviderIcon sets the "has_food_provider_icon" field.
func (cu *CardUpdate) SetHasFoodProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasFoodProviderIcon(b)
	return cu
}

// SetHasCropProviderIcon sets the "has_crop_provider_icon" field.
func (cu *CardUpdate) SetHasCropProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasCropProviderIcon(b)
	return cu
}

// SetHasBuildingResourceProviderIcon sets the "has_building_resource_provider_icon" field.
func (cu *CardUpdate) SetHasBuildingResourceProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasBuildingResourceProviderIcon(b)
	return cu
}

// SetHasLivestockProviderIcon sets the "has_livestock_provider_icon" field.
func (cu *CardUpdate) SetHasLivestockProviderIcon(b bool) *CardUpdate {
	cu.mutation.SetHasLivestockProviderIcon(b)
	return cu
}

// SetHasCutPeatIcon sets the "has_cut_peat_icon" field.
func (cu *CardUpdate) SetHasCutPeatIcon(b bool) *CardUpdate {
	cu.mutation.SetHasCutPeatIcon(b)
	return cu
}

// SetHasFellTreesIcon sets the "has_fell_trees_icon" field.
func (cu *CardUpdate) SetHasFellTreesIcon(b bool) *CardUpdate {
	cu.mutation.SetHasFellTreesIcon(b)
	return cu
}

// SetHasSlashAndBurnIcon sets the "has_slash_and_burn_icon" field.
func (cu *CardUpdate) SetHasSlashAndBurnIcon(b bool) *CardUpdate {
	cu.mutation.SetHasSlashAndBurnIcon(b)
	return cu
}

// SetHasHiringFareIcon sets the "has_hiring_fare_icon" field.
func (cu *CardUpdate) SetHasHiringFareIcon(b bool) *CardUpdate {
	cu.mutation.SetHasHiringFareIcon(b)
	return cu
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cu *CardUpdate) AddProductIDs(ids ...int) *CardUpdate {
	cu.mutation.AddProductIDs(ids...)
	return cu
}

// AddProducts adds the "products" edges to the Product entity.
func (cu *CardUpdate) AddProducts(p ...*Product) *CardUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProductIDs(ids...)
}

// SetDeck sets the "deck" edge to the Deck entity.
func (cu *CardUpdate) SetDeck(d *Deck) *CardUpdate {
	return cu.SetDeckID(d.ID)
}

// SetCardType sets the "card_type" edge to the CardType entity.
func (cu *CardUpdate) SetCardType(c *CardType) *CardUpdate {
	return cu.SetCardTypeID(c.ID)
}

// SetCardSpecialColor sets the "card_special_color" edge to the CardSpecialColor entity.
func (cu *CardUpdate) SetCardSpecialColor(c *CardSpecialColor) *CardUpdate {
	return cu.SetCardSpecialColorID(c.ID)
}

// AddChildIDs adds the "children" edge to the Card entity by IDs.
func (cu *CardUpdate) AddChildIDs(ids ...int) *CardUpdate {
	cu.mutation.AddChildIDs(ids...)
	return cu
}

// AddChildren adds the "children" edges to the Card entity.
func (cu *CardUpdate) AddChildren(c ...*Card) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChildIDs(ids...)
}

// AddAncestorIDs adds the "ancestors" edge to the Card entity by IDs.
func (cu *CardUpdate) AddAncestorIDs(ids ...int) *CardUpdate {
	cu.mutation.AddAncestorIDs(ids...)
	return cu
}

// AddAncestors adds the "ancestors" edges to the Card entity.
func (cu *CardUpdate) AddAncestors(c ...*Card) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddAncestorIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (cu *CardUpdate) ClearProducts() *CardUpdate {
	cu.mutation.ClearProducts()
	return cu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cu *CardUpdate) RemoveProductIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveProductIDs(ids...)
	return cu
}

// RemoveProducts removes "products" edges to Product entities.
func (cu *CardUpdate) RemoveProducts(p ...*Product) *CardUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProductIDs(ids...)
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (cu *CardUpdate) ClearDeck() *CardUpdate {
	cu.mutation.ClearDeck()
	return cu
}

// ClearCardType clears the "card_type" edge to the CardType entity.
func (cu *CardUpdate) ClearCardType() *CardUpdate {
	cu.mutation.ClearCardType()
	return cu
}

// ClearCardSpecialColor clears the "card_special_color" edge to the CardSpecialColor entity.
func (cu *CardUpdate) ClearCardSpecialColor() *CardUpdate {
	cu.mutation.ClearCardSpecialColor()
	return cu
}

// ClearChildren clears all "children" edges to the Card entity.
func (cu *CardUpdate) ClearChildren() *CardUpdate {
	cu.mutation.ClearChildren()
	return cu
}

// RemoveChildIDs removes the "children" edge to Card entities by IDs.
func (cu *CardUpdate) RemoveChildIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveChildIDs(ids...)
	return cu
}

// RemoveChildren removes "children" edges to Card entities.
func (cu *CardUpdate) RemoveChildren(c ...*Card) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChildIDs(ids...)
}

// ClearAncestors clears all "ancestors" edges to the Card entity.
func (cu *CardUpdate) ClearAncestors() *CardUpdate {
	cu.mutation.ClearAncestors()
	return cu
}

// RemoveAncestorIDs removes the "ancestors" edge to Card entities by IDs.
func (cu *CardUpdate) RemoveAncestorIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveAncestorIDs(ids...)
	return cu
}

// RemoveAncestors removes "ancestors" edges to Card entities.
func (cu *CardUpdate) RemoveAncestors(c ...*Card) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveAncestorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CardUpdate) check() error {
	if _, ok := cu.mutation.RevisionID(); cu.mutation.RevisionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.revision"`)
	}
	if _, ok := cu.mutation.CardTypeID(); cu.mutation.CardTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.card_type"`)
	}
	return nil
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.PrintedID(); ok {
		_spec.SetField(card.FieldPrintedID, field.TypeString, value)
	}
	if cu.mutation.PrintedIDCleared() {
		_spec.ClearField(card.FieldPrintedID, field.TypeString)
	}
	if value, ok := cu.mutation.PlayAgricolaCardID(); ok {
		_spec.SetField(card.FieldPlayAgricolaCardID, field.TypeString, value)
	}
	if cu.mutation.PlayAgricolaCardIDCleared() {
		_spec.ClearField(card.FieldPlayAgricolaCardID, field.TypeString)
	}
	if value, ok := cu.mutation.NameJa(); ok {
		_spec.SetField(card.FieldNameJa, field.TypeString, value)
	}
	if cu.mutation.NameJaCleared() {
		_spec.ClearField(card.FieldNameJa, field.TypeString)
	}
	if value, ok := cu.mutation.NameEn(); ok {
		_spec.SetField(card.FieldNameEn, field.TypeString, value)
	}
	if cu.mutation.NameEnCleared() {
		_spec.ClearField(card.FieldNameEn, field.TypeString)
	}
	if value, ok := cu.mutation.MinPlayersNumber(); ok {
		_spec.SetField(card.FieldMinPlayersNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMinPlayersNumber(); ok {
		_spec.AddField(card.FieldMinPlayersNumber, field.TypeInt, value)
	}
	if cu.mutation.MinPlayersNumberCleared() {
		_spec.ClearField(card.FieldMinPlayersNumber, field.TypeInt)
	}
	if value, ok := cu.mutation.Prerequisite(); ok {
		_spec.SetField(card.FieldPrerequisite, field.TypeString, value)
	}
	if cu.mutation.PrerequisiteCleared() {
		_spec.ClearField(card.FieldPrerequisite, field.TypeString)
	}
	if value, ok := cu.mutation.Cost(); ok {
		_spec.SetField(card.FieldCost, field.TypeString, value)
	}
	if cu.mutation.CostCleared() {
		_spec.ClearField(card.FieldCost, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(card.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Note(); ok {
		_spec.SetField(card.FieldNote, field.TypeString, value)
	}
	if cu.mutation.NoteCleared() {
		_spec.ClearField(card.FieldNote, field.TypeString)
	}
	if value, ok := cu.mutation.IsOfficialJa(); ok {
		_spec.SetField(card.FieldIsOfficialJa, field.TypeBool, value)
	}
	if value, ok := cu.mutation.VictoryPoint(); ok {
		_spec.SetField(card.FieldVictoryPoint, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVictoryPoint(); ok {
		_spec.AddField(card.FieldVictoryPoint, field.TypeInt, value)
	}
	if cu.mutation.VictoryPointCleared() {
		_spec.ClearField(card.FieldVictoryPoint, field.TypeInt)
	}
	if value, ok := cu.mutation.SpecialVictoryPoint(); ok {
		_spec.SetField(card.FieldSpecialVictoryPoint, field.TypeString, value)
	}
	if cu.mutation.SpecialVictoryPointCleared() {
		_spec.ClearField(card.FieldSpecialVictoryPoint, field.TypeString)
	}
	if value, ok := cu.mutation.HasArrow(); ok {
		_spec.SetField(card.FieldHasArrow, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasBonusPointIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasNegativeBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasNegativeBonusPointIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasPanIcon(); ok {
		_spec.SetField(card.FieldHasPanIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasBreadIcon(); ok {
		_spec.SetField(card.FieldHasBreadIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasFarmPlannerIcon(); ok {
		_spec.SetField(card.FieldHasFarmPlannerIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasActionsBoosterIcon(); ok {
		_spec.SetField(card.FieldHasActionsBoosterIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasPointsProviderIcon(); ok {
		_spec.SetField(card.FieldHasPointsProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasGoodsProviderIcon(); ok {
		_spec.SetField(card.FieldHasGoodsProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasFoodProviderIcon(); ok {
		_spec.SetField(card.FieldHasFoodProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasCropProviderIcon(); ok {
		_spec.SetField(card.FieldHasCropProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasBuildingResourceProviderIcon(); ok {
		_spec.SetField(card.FieldHasBuildingResourceProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasLivestockProviderIcon(); ok {
		_spec.SetField(card.FieldHasLivestockProviderIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasCutPeatIcon(); ok {
		_spec.SetField(card.FieldHasCutPeatIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasFellTreesIcon(); ok {
		_spec.SetField(card.FieldHasFellTreesIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasSlashAndBurnIcon(); ok {
		_spec.SetField(card.FieldHasSlashAndBurnIcon, field.TypeBool, value)
	}
	if value, ok := cu.mutation.HasHiringFareIcon(); ok {
		_spec.SetField(card.FieldHasHiringFareIcon, field.TypeBool, value)
	}
	if cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckTable,
			Columns: []string{card.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckTable,
			Columns: []string{card.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CardTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardTypeTable,
			Columns: []string{card.CardTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CardTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardTypeTable,
			Columns: []string{card.CardTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CardSpecialColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardSpecialColorTable,
			Columns: []string{card.CardSpecialColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardspecialcolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CardSpecialColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardSpecialColorTable,
			Columns: []string{card.CardSpecialColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardspecialcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AncestorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAncestorsIDs(); len(nodes) > 0 && !cu.mutation.AncestorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AncestorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetPrintedID sets the "printed_id" field.
func (cuo *CardUpdateOne) SetPrintedID(s string) *CardUpdateOne {
	cuo.mutation.SetPrintedID(s)
	return cuo
}

// SetNillablePrintedID sets the "printed_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillablePrintedID(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetPrintedID(*s)
	}
	return cuo
}

// ClearPrintedID clears the value of the "printed_id" field.
func (cuo *CardUpdateOne) ClearPrintedID() *CardUpdateOne {
	cuo.mutation.ClearPrintedID()
	return cuo
}

// SetPlayAgricolaCardID sets the "play_agricola_card_id" field.
func (cuo *CardUpdateOne) SetPlayAgricolaCardID(s string) *CardUpdateOne {
	cuo.mutation.SetPlayAgricolaCardID(s)
	return cuo
}

// SetNillablePlayAgricolaCardID sets the "play_agricola_card_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillablePlayAgricolaCardID(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetPlayAgricolaCardID(*s)
	}
	return cuo
}

// ClearPlayAgricolaCardID clears the value of the "play_agricola_card_id" field.
func (cuo *CardUpdateOne) ClearPlayAgricolaCardID() *CardUpdateOne {
	cuo.mutation.ClearPlayAgricolaCardID()
	return cuo
}

// SetDeckID sets the "deck_id" field.
func (cuo *CardUpdateOne) SetDeckID(i int) *CardUpdateOne {
	cuo.mutation.SetDeckID(i)
	return cuo
}

// SetNillableDeckID sets the "deck_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableDeckID(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetDeckID(*i)
	}
	return cuo
}

// ClearDeckID clears the value of the "deck_id" field.
func (cuo *CardUpdateOne) ClearDeckID() *CardUpdateOne {
	cuo.mutation.ClearDeckID()
	return cuo
}

// SetCardTypeID sets the "card_type_id" field.
func (cuo *CardUpdateOne) SetCardTypeID(i int) *CardUpdateOne {
	cuo.mutation.SetCardTypeID(i)
	return cuo
}

// SetCardSpecialColorID sets the "card_special_color_id" field.
func (cuo *CardUpdateOne) SetCardSpecialColorID(i int) *CardUpdateOne {
	cuo.mutation.SetCardSpecialColorID(i)
	return cuo
}

// SetNillableCardSpecialColorID sets the "card_special_color_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableCardSpecialColorID(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetCardSpecialColorID(*i)
	}
	return cuo
}

// ClearCardSpecialColorID clears the value of the "card_special_color_id" field.
func (cuo *CardUpdateOne) ClearCardSpecialColorID() *CardUpdateOne {
	cuo.mutation.ClearCardSpecialColorID()
	return cuo
}

// SetNameJa sets the "name_ja" field.
func (cuo *CardUpdateOne) SetNameJa(s string) *CardUpdateOne {
	cuo.mutation.SetNameJa(s)
	return cuo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableNameJa(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetNameJa(*s)
	}
	return cuo
}

// ClearNameJa clears the value of the "name_ja" field.
func (cuo *CardUpdateOne) ClearNameJa() *CardUpdateOne {
	cuo.mutation.ClearNameJa()
	return cuo
}

// SetNameEn sets the "name_en" field.
func (cuo *CardUpdateOne) SetNameEn(s string) *CardUpdateOne {
	cuo.mutation.SetNameEn(s)
	return cuo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableNameEn(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetNameEn(*s)
	}
	return cuo
}

// ClearNameEn clears the value of the "name_en" field.
func (cuo *CardUpdateOne) ClearNameEn() *CardUpdateOne {
	cuo.mutation.ClearNameEn()
	return cuo
}

// SetMinPlayersNumber sets the "min_players_number" field.
func (cuo *CardUpdateOne) SetMinPlayersNumber(i int) *CardUpdateOne {
	cuo.mutation.ResetMinPlayersNumber()
	cuo.mutation.SetMinPlayersNumber(i)
	return cuo
}

// SetNillableMinPlayersNumber sets the "min_players_number" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableMinPlayersNumber(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetMinPlayersNumber(*i)
	}
	return cuo
}

// AddMinPlayersNumber adds i to the "min_players_number" field.
func (cuo *CardUpdateOne) AddMinPlayersNumber(i int) *CardUpdateOne {
	cuo.mutation.AddMinPlayersNumber(i)
	return cuo
}

// ClearMinPlayersNumber clears the value of the "min_players_number" field.
func (cuo *CardUpdateOne) ClearMinPlayersNumber() *CardUpdateOne {
	cuo.mutation.ClearMinPlayersNumber()
	return cuo
}

// SetPrerequisite sets the "prerequisite" field.
func (cuo *CardUpdateOne) SetPrerequisite(s string) *CardUpdateOne {
	cuo.mutation.SetPrerequisite(s)
	return cuo
}

// SetNillablePrerequisite sets the "prerequisite" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillablePrerequisite(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetPrerequisite(*s)
	}
	return cuo
}

// ClearPrerequisite clears the value of the "prerequisite" field.
func (cuo *CardUpdateOne) ClearPrerequisite() *CardUpdateOne {
	cuo.mutation.ClearPrerequisite()
	return cuo
}

// SetCost sets the "cost" field.
func (cuo *CardUpdateOne) SetCost(s string) *CardUpdateOne {
	cuo.mutation.SetCost(s)
	return cuo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableCost(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetCost(*s)
	}
	return cuo
}

// ClearCost clears the value of the "cost" field.
func (cuo *CardUpdateOne) ClearCost() *CardUpdateOne {
	cuo.mutation.ClearCost()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CardUpdateOne) SetDescription(s string) *CardUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableDescription(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CardUpdateOne) ClearDescription() *CardUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetNote sets the "note" field.
func (cuo *CardUpdateOne) SetNote(s string) *CardUpdateOne {
	cuo.mutation.SetNote(s)
	return cuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableNote(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetNote(*s)
	}
	return cuo
}

// ClearNote clears the value of the "note" field.
func (cuo *CardUpdateOne) ClearNote() *CardUpdateOne {
	cuo.mutation.ClearNote()
	return cuo
}

// SetIsOfficialJa sets the "is_official_ja" field.
func (cuo *CardUpdateOne) SetIsOfficialJa(b bool) *CardUpdateOne {
	cuo.mutation.SetIsOfficialJa(b)
	return cuo
}

// SetVictoryPoint sets the "victory_point" field.
func (cuo *CardUpdateOne) SetVictoryPoint(i int) *CardUpdateOne {
	cuo.mutation.ResetVictoryPoint()
	cuo.mutation.SetVictoryPoint(i)
	return cuo
}

// SetNillableVictoryPoint sets the "victory_point" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableVictoryPoint(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetVictoryPoint(*i)
	}
	return cuo
}

// AddVictoryPoint adds i to the "victory_point" field.
func (cuo *CardUpdateOne) AddVictoryPoint(i int) *CardUpdateOne {
	cuo.mutation.AddVictoryPoint(i)
	return cuo
}

// ClearVictoryPoint clears the value of the "victory_point" field.
func (cuo *CardUpdateOne) ClearVictoryPoint() *CardUpdateOne {
	cuo.mutation.ClearVictoryPoint()
	return cuo
}

// SetSpecialVictoryPoint sets the "special_victory_point" field.
func (cuo *CardUpdateOne) SetSpecialVictoryPoint(s string) *CardUpdateOne {
	cuo.mutation.SetSpecialVictoryPoint(s)
	return cuo
}

// SetNillableSpecialVictoryPoint sets the "special_victory_point" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableSpecialVictoryPoint(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetSpecialVictoryPoint(*s)
	}
	return cuo
}

// ClearSpecialVictoryPoint clears the value of the "special_victory_point" field.
func (cuo *CardUpdateOne) ClearSpecialVictoryPoint() *CardUpdateOne {
	cuo.mutation.ClearSpecialVictoryPoint()
	return cuo
}

// SetHasArrow sets the "has_arrow" field.
func (cuo *CardUpdateOne) SetHasArrow(b bool) *CardUpdateOne {
	cuo.mutation.SetHasArrow(b)
	return cuo
}

// SetHasBonusPointIcon sets the "has_bonus_point_icon" field.
func (cuo *CardUpdateOne) SetHasBonusPointIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasBonusPointIcon(b)
	return cuo
}

// SetHasNegativeBonusPointIcon sets the "has_negative_bonus_point_icon" field.
func (cuo *CardUpdateOne) SetHasNegativeBonusPointIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasNegativeBonusPointIcon(b)
	return cuo
}

// SetHasPanIcon sets the "has_pan_icon" field.
func (cuo *CardUpdateOne) SetHasPanIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasPanIcon(b)
	return cuo
}

// SetHasBreadIcon sets the "has_bread_icon" field.
func (cuo *CardUpdateOne) SetHasBreadIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasBreadIcon(b)
	return cuo
}

// SetHasFarmPlannerIcon sets the "has_farm_planner_icon" field.
func (cuo *CardUpdateOne) SetHasFarmPlannerIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasFarmPlannerIcon(b)
	return cuo
}

// SetHasActionsBoosterIcon sets the "has_actions_booster_icon" field.
func (cuo *CardUpdateOne) SetHasActionsBoosterIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasActionsBoosterIcon(b)
	return cuo
}

// SetHasPointsProviderIcon sets the "has_points_provider_icon" field.
func (cuo *CardUpdateOne) SetHasPointsProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasPointsProviderIcon(b)
	return cuo
}

// SetHasGoodsProviderIcon sets the "has_goods_provider_icon" field.
func (cuo *CardUpdateOne) SetHasGoodsProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasGoodsProviderIcon(b)
	return cuo
}

// SetHasFoodProviderIcon sets the "has_food_provider_icon" field.
func (cuo *CardUpdateOne) SetHasFoodProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasFoodProviderIcon(b)
	return cuo
}

// SetHasCropProviderIcon sets the "has_crop_provider_icon" field.
func (cuo *CardUpdateOne) SetHasCropProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasCropProviderIcon(b)
	return cuo
}

// SetHasBuildingResourceProviderIcon sets the "has_building_resource_provider_icon" field.
func (cuo *CardUpdateOne) SetHasBuildingResourceProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasBuildingResourceProviderIcon(b)
	return cuo
}

// SetHasLivestockProviderIcon sets the "has_livestock_provider_icon" field.
func (cuo *CardUpdateOne) SetHasLivestockProviderIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasLivestockProviderIcon(b)
	return cuo
}

// SetHasCutPeatIcon sets the "has_cut_peat_icon" field.
func (cuo *CardUpdateOne) SetHasCutPeatIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasCutPeatIcon(b)
	return cuo
}

// SetHasFellTreesIcon sets the "has_fell_trees_icon" field.
func (cuo *CardUpdateOne) SetHasFellTreesIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasFellTreesIcon(b)
	return cuo
}

// SetHasSlashAndBurnIcon sets the "has_slash_and_burn_icon" field.
func (cuo *CardUpdateOne) SetHasSlashAndBurnIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasSlashAndBurnIcon(b)
	return cuo
}

// SetHasHiringFareIcon sets the "has_hiring_fare_icon" field.
func (cuo *CardUpdateOne) SetHasHiringFareIcon(b bool) *CardUpdateOne {
	cuo.mutation.SetHasHiringFareIcon(b)
	return cuo
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cuo *CardUpdateOne) AddProductIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddProductIDs(ids...)
	return cuo
}

// AddProducts adds the "products" edges to the Product entity.
func (cuo *CardUpdateOne) AddProducts(p ...*Product) *CardUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProductIDs(ids...)
}

// SetDeck sets the "deck" edge to the Deck entity.
func (cuo *CardUpdateOne) SetDeck(d *Deck) *CardUpdateOne {
	return cuo.SetDeckID(d.ID)
}

// SetCardType sets the "card_type" edge to the CardType entity.
func (cuo *CardUpdateOne) SetCardType(c *CardType) *CardUpdateOne {
	return cuo.SetCardTypeID(c.ID)
}

// SetCardSpecialColor sets the "card_special_color" edge to the CardSpecialColor entity.
func (cuo *CardUpdateOne) SetCardSpecialColor(c *CardSpecialColor) *CardUpdateOne {
	return cuo.SetCardSpecialColorID(c.ID)
}

// AddChildIDs adds the "children" edge to the Card entity by IDs.
func (cuo *CardUpdateOne) AddChildIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddChildIDs(ids...)
	return cuo
}

// AddChildren adds the "children" edges to the Card entity.
func (cuo *CardUpdateOne) AddChildren(c ...*Card) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChildIDs(ids...)
}

// AddAncestorIDs adds the "ancestors" edge to the Card entity by IDs.
func (cuo *CardUpdateOne) AddAncestorIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddAncestorIDs(ids...)
	return cuo
}

// AddAncestors adds the "ancestors" edges to the Card entity.
func (cuo *CardUpdateOne) AddAncestors(c ...*Card) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddAncestorIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (cuo *CardUpdateOne) ClearProducts() *CardUpdateOne {
	cuo.mutation.ClearProducts()
	return cuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cuo *CardUpdateOne) RemoveProductIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveProductIDs(ids...)
	return cuo
}

// RemoveProducts removes "products" edges to Product entities.
func (cuo *CardUpdateOne) RemoveProducts(p ...*Product) *CardUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProductIDs(ids...)
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (cuo *CardUpdateOne) ClearDeck() *CardUpdateOne {
	cuo.mutation.ClearDeck()
	return cuo
}

// ClearCardType clears the "card_type" edge to the CardType entity.
func (cuo *CardUpdateOne) ClearCardType() *CardUpdateOne {
	cuo.mutation.ClearCardType()
	return cuo
}

// ClearCardSpecialColor clears the "card_special_color" edge to the CardSpecialColor entity.
func (cuo *CardUpdateOne) ClearCardSpecialColor() *CardUpdateOne {
	cuo.mutation.ClearCardSpecialColor()
	return cuo
}

// ClearChildren clears all "children" edges to the Card entity.
func (cuo *CardUpdateOne) ClearChildren() *CardUpdateOne {
	cuo.mutation.ClearChildren()
	return cuo
}

// RemoveChildIDs removes the "children" edge to Card entities by IDs.
func (cuo *CardUpdateOne) RemoveChildIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveChildIDs(ids...)
	return cuo
}

// RemoveChildren removes "children" edges to Card entities.
func (cuo *CardUpdateOne) RemoveChildren(c ...*Card) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChildIDs(ids...)
}

// ClearAncestors clears all "ancestors" edges to the Card entity.
func (cuo *CardUpdateOne) ClearAncestors() *CardUpdateOne {
	cuo.mutation.ClearAncestors()
	return cuo
}

// RemoveAncestorIDs removes the "ancestors" edge to Card entities by IDs.
func (cuo *CardUpdateOne) RemoveAncestorIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveAncestorIDs(ids...)
	return cuo
}

// RemoveAncestors removes "ancestors" edges to Card entities.
func (cuo *CardUpdateOne) RemoveAncestors(c ...*Card) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveAncestorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CardUpdateOne) check() error {
	if _, ok := cuo.mutation.RevisionID(); cuo.mutation.RevisionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.revision"`)
	}
	if _, ok := cuo.mutation.CardTypeID(); cuo.mutation.CardTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.card_type"`)
	}
	return nil
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.PrintedID(); ok {
		_spec.SetField(card.FieldPrintedID, field.TypeString, value)
	}
	if cuo.mutation.PrintedIDCleared() {
		_spec.ClearField(card.FieldPrintedID, field.TypeString)
	}
	if value, ok := cuo.mutation.PlayAgricolaCardID(); ok {
		_spec.SetField(card.FieldPlayAgricolaCardID, field.TypeString, value)
	}
	if cuo.mutation.PlayAgricolaCardIDCleared() {
		_spec.ClearField(card.FieldPlayAgricolaCardID, field.TypeString)
	}
	if value, ok := cuo.mutation.NameJa(); ok {
		_spec.SetField(card.FieldNameJa, field.TypeString, value)
	}
	if cuo.mutation.NameJaCleared() {
		_spec.ClearField(card.FieldNameJa, field.TypeString)
	}
	if value, ok := cuo.mutation.NameEn(); ok {
		_spec.SetField(card.FieldNameEn, field.TypeString, value)
	}
	if cuo.mutation.NameEnCleared() {
		_spec.ClearField(card.FieldNameEn, field.TypeString)
	}
	if value, ok := cuo.mutation.MinPlayersNumber(); ok {
		_spec.SetField(card.FieldMinPlayersNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMinPlayersNumber(); ok {
		_spec.AddField(card.FieldMinPlayersNumber, field.TypeInt, value)
	}
	if cuo.mutation.MinPlayersNumberCleared() {
		_spec.ClearField(card.FieldMinPlayersNumber, field.TypeInt)
	}
	if value, ok := cuo.mutation.Prerequisite(); ok {
		_spec.SetField(card.FieldPrerequisite, field.TypeString, value)
	}
	if cuo.mutation.PrerequisiteCleared() {
		_spec.ClearField(card.FieldPrerequisite, field.TypeString)
	}
	if value, ok := cuo.mutation.Cost(); ok {
		_spec.SetField(card.FieldCost, field.TypeString, value)
	}
	if cuo.mutation.CostCleared() {
		_spec.ClearField(card.FieldCost, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(card.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Note(); ok {
		_spec.SetField(card.FieldNote, field.TypeString, value)
	}
	if cuo.mutation.NoteCleared() {
		_spec.ClearField(card.FieldNote, field.TypeString)
	}
	if value, ok := cuo.mutation.IsOfficialJa(); ok {
		_spec.SetField(card.FieldIsOfficialJa, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.VictoryPoint(); ok {
		_spec.SetField(card.FieldVictoryPoint, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVictoryPoint(); ok {
		_spec.AddField(card.FieldVictoryPoint, field.TypeInt, value)
	}
	if cuo.mutation.VictoryPointCleared() {
		_spec.ClearField(card.FieldVictoryPoint, field.TypeInt)
	}
	if value, ok := cuo.mutation.SpecialVictoryPoint(); ok {
		_spec.SetField(card.FieldSpecialVictoryPoint, field.TypeString, value)
	}
	if cuo.mutation.SpecialVictoryPointCleared() {
		_spec.ClearField(card.FieldSpecialVictoryPoint, field.TypeString)
	}
	if value, ok := cuo.mutation.HasArrow(); ok {
		_spec.SetField(card.FieldHasArrow, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasBonusPointIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasNegativeBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasNegativeBonusPointIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasPanIcon(); ok {
		_spec.SetField(card.FieldHasPanIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasBreadIcon(); ok {
		_spec.SetField(card.FieldHasBreadIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasFarmPlannerIcon(); ok {
		_spec.SetField(card.FieldHasFarmPlannerIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasActionsBoosterIcon(); ok {
		_spec.SetField(card.FieldHasActionsBoosterIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasPointsProviderIcon(); ok {
		_spec.SetField(card.FieldHasPointsProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasGoodsProviderIcon(); ok {
		_spec.SetField(card.FieldHasGoodsProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasFoodProviderIcon(); ok {
		_spec.SetField(card.FieldHasFoodProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasCropProviderIcon(); ok {
		_spec.SetField(card.FieldHasCropProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasBuildingResourceProviderIcon(); ok {
		_spec.SetField(card.FieldHasBuildingResourceProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasLivestockProviderIcon(); ok {
		_spec.SetField(card.FieldHasLivestockProviderIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasCutPeatIcon(); ok {
		_spec.SetField(card.FieldHasCutPeatIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasFellTreesIcon(); ok {
		_spec.SetField(card.FieldHasFellTreesIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasSlashAndBurnIcon(); ok {
		_spec.SetField(card.FieldHasSlashAndBurnIcon, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.HasHiringFareIcon(); ok {
		_spec.SetField(card.FieldHasHiringFareIcon, field.TypeBool, value)
	}
	if cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckTable,
			Columns: []string{card.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckTable,
			Columns: []string{card.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CardTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardTypeTable,
			Columns: []string{card.CardTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CardTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardTypeTable,
			Columns: []string{card.CardTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CardSpecialColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardSpecialColorTable,
			Columns: []string{card.CardSpecialColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardspecialcolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CardSpecialColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardSpecialColorTable,
			Columns: []string{card.CardSpecialColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardspecialcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AncestorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAncestorsIDs(); len(nodes) > 0 && !cuo.mutation.AncestorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AncestorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
