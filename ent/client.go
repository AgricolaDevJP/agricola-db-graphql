// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/AgricolaDevJP/agricoladb-server/ent/migrate"

	"github.com/AgricolaDevJP/agricoladb-server/ent/card"
	"github.com/AgricolaDevJP/agricoladb-server/ent/cardspecialcolor"
	"github.com/AgricolaDevJP/agricoladb-server/ent/cardtype"
	"github.com/AgricolaDevJP/agricoladb-server/ent/deck"
	"github.com/AgricolaDevJP/agricoladb-server/ent/product"
	"github.com/AgricolaDevJP/agricoladb-server/ent/revision"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// CardSpecialColor is the client for interacting with the CardSpecialColor builders.
	CardSpecialColor *CardSpecialColorClient
	// CardType is the client for interacting with the CardType builders.
	CardType *CardTypeClient
	// Deck is the client for interacting with the Deck builders.
	Deck *DeckClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Revision is the client for interacting with the Revision builders.
	Revision *RevisionClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Card = NewCardClient(c.config)
	c.CardSpecialColor = NewCardSpecialColorClient(c.config)
	c.CardType = NewCardTypeClient(c.config)
	c.Deck = NewDeckClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Revision = NewRevisionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Card:             NewCardClient(cfg),
		CardSpecialColor: NewCardSpecialColorClient(cfg),
		CardType:         NewCardTypeClient(cfg),
		Deck:             NewDeckClient(cfg),
		Product:          NewProductClient(cfg),
		Revision:         NewRevisionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Card:             NewCardClient(cfg),
		CardSpecialColor: NewCardSpecialColorClient(cfg),
		CardType:         NewCardTypeClient(cfg),
		Deck:             NewDeckClient(cfg),
		Product:          NewProductClient(cfg),
		Revision:         NewRevisionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Card.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Card.Use(hooks...)
	c.CardSpecialColor.Use(hooks...)
	c.CardType.Use(hooks...)
	c.Deck.Use(hooks...)
	c.Product.Use(hooks...)
	c.Revision.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Card.Intercept(interceptors...)
	c.CardSpecialColor.Intercept(interceptors...)
	c.CardType.Intercept(interceptors...)
	c.Deck.Intercept(interceptors...)
	c.Product.Intercept(interceptors...)
	c.Revision.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CardMutation:
		return c.Card.mutate(ctx, m)
	case *CardSpecialColorMutation:
		return c.CardSpecialColor.mutate(ctx, m)
	case *CardTypeMutation:
		return c.CardType.mutate(ctx, m)
	case *DeckMutation:
		return c.Deck.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *RevisionMutation:
		return c.Revision.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `card.Intercept(f(g(h())))`.
func (c *CardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Card = append(c.inters.Card, interceptors...)
}

// Create returns a builder for creating a Card entity.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id int) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardClient) DeleteOneID(id int) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCard},
		inters: c.Interceptors(),
	}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id int) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id int) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRevision queries the revision edge of a Card.
func (c *CardClient) QueryRevision(ca *Card) *RevisionQuery {
	query := (&RevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(revision.Table, revision.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.RevisionTable, card.RevisionColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Card.
func (c *CardClient) QueryProducts(ca *Card) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.ProductsTable, card.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeck queries the deck edge of a Card.
func (c *CardClient) QueryDeck(ca *Card) *DeckQuery {
	query := (&DeckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(deck.Table, deck.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.DeckTable, card.DeckColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCardType queries the card_type edge of a Card.
func (c *CardClient) QueryCardType(ca *Card) *CardTypeQuery {
	query := (&CardTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(cardtype.Table, cardtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.CardTypeTable, card.CardTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCardSpecialColor queries the card_special_color edge of a Card.
func (c *CardClient) QueryCardSpecialColor(ca *Card) *CardSpecialColorQuery {
	query := (&CardSpecialColorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(cardspecialcolor.Table, cardspecialcolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.CardSpecialColorTable, card.CardSpecialColorColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Card.
func (c *CardClient) QueryChildren(ca *Card) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.ChildrenTable, card.ChildrenPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAncestors queries the ancestors edge of a Card.
func (c *CardClient) QueryAncestors(ca *Card) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, card.AncestorsTable, card.AncestorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// Interceptors returns the client interceptors.
func (c *CardClient) Interceptors() []Interceptor {
	return c.inters.Card
}

func (c *CardClient) mutate(ctx context.Context, m *CardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Card mutation op: %q", m.Op())
	}
}

// CardSpecialColorClient is a client for the CardSpecialColor schema.
type CardSpecialColorClient struct {
	config
}

// NewCardSpecialColorClient returns a client for the CardSpecialColor from the given config.
func NewCardSpecialColorClient(c config) *CardSpecialColorClient {
	return &CardSpecialColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cardspecialcolor.Hooks(f(g(h())))`.
func (c *CardSpecialColorClient) Use(hooks ...Hook) {
	c.hooks.CardSpecialColor = append(c.hooks.CardSpecialColor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cardspecialcolor.Intercept(f(g(h())))`.
func (c *CardSpecialColorClient) Intercept(interceptors ...Interceptor) {
	c.inters.CardSpecialColor = append(c.inters.CardSpecialColor, interceptors...)
}

// Create returns a builder for creating a CardSpecialColor entity.
func (c *CardSpecialColorClient) Create() *CardSpecialColorCreate {
	mutation := newCardSpecialColorMutation(c.config, OpCreate)
	return &CardSpecialColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CardSpecialColor entities.
func (c *CardSpecialColorClient) CreateBulk(builders ...*CardSpecialColorCreate) *CardSpecialColorCreateBulk {
	return &CardSpecialColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CardSpecialColor.
func (c *CardSpecialColorClient) Update() *CardSpecialColorUpdate {
	mutation := newCardSpecialColorMutation(c.config, OpUpdate)
	return &CardSpecialColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardSpecialColorClient) UpdateOne(csc *CardSpecialColor) *CardSpecialColorUpdateOne {
	mutation := newCardSpecialColorMutation(c.config, OpUpdateOne, withCardSpecialColor(csc))
	return &CardSpecialColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardSpecialColorClient) UpdateOneID(id int) *CardSpecialColorUpdateOne {
	mutation := newCardSpecialColorMutation(c.config, OpUpdateOne, withCardSpecialColorID(id))
	return &CardSpecialColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CardSpecialColor.
func (c *CardSpecialColorClient) Delete() *CardSpecialColorDelete {
	mutation := newCardSpecialColorMutation(c.config, OpDelete)
	return &CardSpecialColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardSpecialColorClient) DeleteOne(csc *CardSpecialColor) *CardSpecialColorDeleteOne {
	return c.DeleteOneID(csc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardSpecialColorClient) DeleteOneID(id int) *CardSpecialColorDeleteOne {
	builder := c.Delete().Where(cardspecialcolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardSpecialColorDeleteOne{builder}
}

// Query returns a query builder for CardSpecialColor.
func (c *CardSpecialColorClient) Query() *CardSpecialColorQuery {
	return &CardSpecialColorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCardSpecialColor},
		inters: c.Interceptors(),
	}
}

// Get returns a CardSpecialColor entity by its id.
func (c *CardSpecialColorClient) Get(ctx context.Context, id int) (*CardSpecialColor, error) {
	return c.Query().Where(cardspecialcolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardSpecialColorClient) GetX(ctx context.Context, id int) *CardSpecialColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a CardSpecialColor.
func (c *CardSpecialColorClient) QueryCards(csc *CardSpecialColor) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cardspecialcolor.Table, cardspecialcolor.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cardspecialcolor.CardsTable, cardspecialcolor.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(csc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardSpecialColorClient) Hooks() []Hook {
	return c.hooks.CardSpecialColor
}

// Interceptors returns the client interceptors.
func (c *CardSpecialColorClient) Interceptors() []Interceptor {
	return c.inters.CardSpecialColor
}

func (c *CardSpecialColorClient) mutate(ctx context.Context, m *CardSpecialColorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CardSpecialColorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CardSpecialColorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CardSpecialColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CardSpecialColorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CardSpecialColor mutation op: %q", m.Op())
	}
}

// CardTypeClient is a client for the CardType schema.
type CardTypeClient struct {
	config
}

// NewCardTypeClient returns a client for the CardType from the given config.
func NewCardTypeClient(c config) *CardTypeClient {
	return &CardTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cardtype.Hooks(f(g(h())))`.
func (c *CardTypeClient) Use(hooks ...Hook) {
	c.hooks.CardType = append(c.hooks.CardType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cardtype.Intercept(f(g(h())))`.
func (c *CardTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CardType = append(c.inters.CardType, interceptors...)
}

// Create returns a builder for creating a CardType entity.
func (c *CardTypeClient) Create() *CardTypeCreate {
	mutation := newCardTypeMutation(c.config, OpCreate)
	return &CardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CardType entities.
func (c *CardTypeClient) CreateBulk(builders ...*CardTypeCreate) *CardTypeCreateBulk {
	return &CardTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CardType.
func (c *CardTypeClient) Update() *CardTypeUpdate {
	mutation := newCardTypeMutation(c.config, OpUpdate)
	return &CardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardTypeClient) UpdateOne(ct *CardType) *CardTypeUpdateOne {
	mutation := newCardTypeMutation(c.config, OpUpdateOne, withCardType(ct))
	return &CardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardTypeClient) UpdateOneID(id int) *CardTypeUpdateOne {
	mutation := newCardTypeMutation(c.config, OpUpdateOne, withCardTypeID(id))
	return &CardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CardType.
func (c *CardTypeClient) Delete() *CardTypeDelete {
	mutation := newCardTypeMutation(c.config, OpDelete)
	return &CardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardTypeClient) DeleteOne(ct *CardType) *CardTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardTypeClient) DeleteOneID(id int) *CardTypeDeleteOne {
	builder := c.Delete().Where(cardtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardTypeDeleteOne{builder}
}

// Query returns a query builder for CardType.
func (c *CardTypeClient) Query() *CardTypeQuery {
	return &CardTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCardType},
		inters: c.Interceptors(),
	}
}

// Get returns a CardType entity by its id.
func (c *CardTypeClient) Get(ctx context.Context, id int) (*CardType, error) {
	return c.Query().Where(cardtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardTypeClient) GetX(ctx context.Context, id int) *CardType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a CardType.
func (c *CardTypeClient) QueryCards(ct *CardType) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cardtype.Table, cardtype.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cardtype.CardsTable, cardtype.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardTypeClient) Hooks() []Hook {
	return c.hooks.CardType
}

// Interceptors returns the client interceptors.
func (c *CardTypeClient) Interceptors() []Interceptor {
	return c.inters.CardType
}

func (c *CardTypeClient) mutate(ctx context.Context, m *CardTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CardType mutation op: %q", m.Op())
	}
}

// DeckClient is a client for the Deck schema.
type DeckClient struct {
	config
}

// NewDeckClient returns a client for the Deck from the given config.
func NewDeckClient(c config) *DeckClient {
	return &DeckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deck.Hooks(f(g(h())))`.
func (c *DeckClient) Use(hooks ...Hook) {
	c.hooks.Deck = append(c.hooks.Deck, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deck.Intercept(f(g(h())))`.
func (c *DeckClient) Intercept(interceptors ...Interceptor) {
	c.inters.Deck = append(c.inters.Deck, interceptors...)
}

// Create returns a builder for creating a Deck entity.
func (c *DeckClient) Create() *DeckCreate {
	mutation := newDeckMutation(c.config, OpCreate)
	return &DeckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deck entities.
func (c *DeckClient) CreateBulk(builders ...*DeckCreate) *DeckCreateBulk {
	return &DeckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deck.
func (c *DeckClient) Update() *DeckUpdate {
	mutation := newDeckMutation(c.config, OpUpdate)
	return &DeckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeckClient) UpdateOne(d *Deck) *DeckUpdateOne {
	mutation := newDeckMutation(c.config, OpUpdateOne, withDeck(d))
	return &DeckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeckClient) UpdateOneID(id int) *DeckUpdateOne {
	mutation := newDeckMutation(c.config, OpUpdateOne, withDeckID(id))
	return &DeckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deck.
func (c *DeckClient) Delete() *DeckDelete {
	mutation := newDeckMutation(c.config, OpDelete)
	return &DeckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeckClient) DeleteOne(d *Deck) *DeckDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeckClient) DeleteOneID(id int) *DeckDeleteOne {
	builder := c.Delete().Where(deck.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeckDeleteOne{builder}
}

// Query returns a query builder for Deck.
func (c *DeckClient) Query() *DeckQuery {
	return &DeckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeck},
		inters: c.Interceptors(),
	}
}

// Get returns a Deck entity by its id.
func (c *DeckClient) Get(ctx context.Context, id int) (*Deck, error) {
	return c.Query().Where(deck.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeckClient) GetX(ctx context.Context, id int) *Deck {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Deck.
func (c *DeckClient) QueryCards(d *Deck) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deck.Table, deck.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deck.CardsTable, deck.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevision queries the revision edge of a Deck.
func (c *DeckClient) QueryRevision(d *Deck) *RevisionQuery {
	query := (&RevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deck.Table, deck.FieldID, id),
			sqlgraph.To(revision.Table, revision.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deck.RevisionTable, deck.RevisionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeckClient) Hooks() []Hook {
	return c.hooks.Deck
}

// Interceptors returns the client interceptors.
func (c *DeckClient) Interceptors() []Interceptor {
	return c.inters.Deck
}

func (c *DeckClient) mutate(ctx context.Context, m *DeckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Deck mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Product.
func (c *ProductClient) QueryCards(pr *Product) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, product.CardsTable, product.CardsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevision queries the revision edge of a Product.
func (c *ProductClient) QueryRevision(pr *Product) *RevisionQuery {
	query := (&RevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(revision.Table, revision.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.RevisionTable, product.RevisionColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// RevisionClient is a client for the Revision schema.
type RevisionClient struct {
	config
}

// NewRevisionClient returns a client for the Revision from the given config.
func NewRevisionClient(c config) *RevisionClient {
	return &RevisionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `revision.Hooks(f(g(h())))`.
func (c *RevisionClient) Use(hooks ...Hook) {
	c.hooks.Revision = append(c.hooks.Revision, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `revision.Intercept(f(g(h())))`.
func (c *RevisionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Revision = append(c.inters.Revision, interceptors...)
}

// Create returns a builder for creating a Revision entity.
func (c *RevisionClient) Create() *RevisionCreate {
	mutation := newRevisionMutation(c.config, OpCreate)
	return &RevisionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Revision entities.
func (c *RevisionClient) CreateBulk(builders ...*RevisionCreate) *RevisionCreateBulk {
	return &RevisionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Revision.
func (c *RevisionClient) Update() *RevisionUpdate {
	mutation := newRevisionMutation(c.config, OpUpdate)
	return &RevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RevisionClient) UpdateOne(r *Revision) *RevisionUpdateOne {
	mutation := newRevisionMutation(c.config, OpUpdateOne, withRevision(r))
	return &RevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RevisionClient) UpdateOneID(id int) *RevisionUpdateOne {
	mutation := newRevisionMutation(c.config, OpUpdateOne, withRevisionID(id))
	return &RevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Revision.
func (c *RevisionClient) Delete() *RevisionDelete {
	mutation := newRevisionMutation(c.config, OpDelete)
	return &RevisionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RevisionClient) DeleteOne(r *Revision) *RevisionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RevisionClient) DeleteOneID(id int) *RevisionDeleteOne {
	builder := c.Delete().Where(revision.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RevisionDeleteOne{builder}
}

// Query returns a query builder for Revision.
func (c *RevisionClient) Query() *RevisionQuery {
	return &RevisionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRevision},
		inters: c.Interceptors(),
	}
}

// Get returns a Revision entity by its id.
func (c *RevisionClient) Get(ctx context.Context, id int) (*Revision, error) {
	return c.Query().Where(revision.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RevisionClient) GetX(ctx context.Context, id int) *Revision {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Revision.
func (c *RevisionClient) QueryCards(r *Revision) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revision.Table, revision.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, revision.CardsTable, revision.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Revision.
func (c *RevisionClient) QueryProducts(r *Revision) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revision.Table, revision.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, revision.ProductsTable, revision.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDecks queries the decks edge of a Revision.
func (c *RevisionClient) QueryDecks(r *Revision) *DeckQuery {
	query := (&DeckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revision.Table, revision.FieldID, id),
			sqlgraph.To(deck.Table, deck.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, revision.DecksTable, revision.DecksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RevisionClient) Hooks() []Hook {
	return c.hooks.Revision
}

// Interceptors returns the client interceptors.
func (c *RevisionClient) Interceptors() []Interceptor {
	return c.inters.Revision
}

func (c *RevisionClient) mutate(ctx context.Context, m *RevisionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RevisionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RevisionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Revision mutation op: %q", m.Op())
	}
}
