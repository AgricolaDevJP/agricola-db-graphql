// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agricoladb/ent/card"
	"agricoladb/ent/cardspecialcolor"
	"agricoladb/ent/cardtype"
	"agricoladb/ent/deck"
	"agricoladb/ent/product"
	"agricoladb/ent/revision"
	"agricoladb/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cardFields := schema.Card{}.Fields()
	_ = cardFields
	// cardDescLiteralID is the schema descriptor for literal_id field.
	cardDescLiteralID := cardFields[0].Descriptor()
	// card.LiteralIDValidator is a validator for the "literal_id" field. It is called by the builders before save.
	card.LiteralIDValidator = func() func(string) error {
		validators := cardDescLiteralID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(literal_id string) error {
			for _, fn := range fns {
				if err := fn(literal_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	cardspecialcolorFields := schema.CardSpecialColor{}.Fields()
	_ = cardspecialcolorFields
	// cardspecialcolorDescKey is the schema descriptor for key field.
	cardspecialcolorDescKey := cardspecialcolorFields[0].Descriptor()
	// cardspecialcolor.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	cardspecialcolor.KeyValidator = cardspecialcolorDescKey.Validators[0].(func(string) error)
	cardtypeFields := schema.CardType{}.Fields()
	_ = cardtypeFields
	// cardtypeDescKey is the schema descriptor for key field.
	cardtypeDescKey := cardtypeFields[0].Descriptor()
	// cardtype.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	cardtype.KeyValidator = cardtypeDescKey.Validators[0].(func(string) error)
	deckFields := schema.Deck{}.Fields()
	_ = deckFields
	// deckDescKey is the schema descriptor for key field.
	deckDescKey := deckFields[0].Descriptor()
	// deck.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	deck.KeyValidator = deckDescKey.Validators[0].(func(string) error)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescKey is the schema descriptor for key field.
	productDescKey := productFields[0].Descriptor()
	// product.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	product.KeyValidator = productDescKey.Validators[0].(func(string) error)
	revisionFields := schema.Revision{}.Fields()
	_ = revisionFields
	// revisionDescKey is the schema descriptor for key field.
	revisionDescKey := revisionFields[0].Descriptor()
	// revision.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	revision.KeyValidator = revisionDescKey.Validators[0].(func(string) error)
}
