// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agricoladb/ent/card"
	"agricoladb/ent/deck"
	"agricoladb/ent/revision"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeckCreate is the builder for creating a Deck entity.
type DeckCreate struct {
	config
	mutation *DeckMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (dc *DeckCreate) SetKey(s string) *DeckCreate {
	dc.mutation.SetKey(s)
	return dc
}

// SetRevisionID sets the "revision_id" field.
func (dc *DeckCreate) SetRevisionID(i int) *DeckCreate {
	dc.mutation.SetRevisionID(i)
	return dc
}

// SetNameJa sets the "name_ja" field.
func (dc *DeckCreate) SetNameJa(s string) *DeckCreate {
	dc.mutation.SetNameJa(s)
	return dc
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (dc *DeckCreate) SetNillableNameJa(s *string) *DeckCreate {
	if s != nil {
		dc.SetNameJa(*s)
	}
	return dc
}

// SetNameEn sets the "name_en" field.
func (dc *DeckCreate) SetNameEn(s string) *DeckCreate {
	dc.mutation.SetNameEn(s)
	return dc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (dc *DeckCreate) SetNillableNameEn(s *string) *DeckCreate {
	if s != nil {
		dc.SetNameEn(*s)
	}
	return dc
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (dc *DeckCreate) AddCardIDs(ids ...int) *DeckCreate {
	dc.mutation.AddCardIDs(ids...)
	return dc
}

// AddCards adds the "cards" edges to the Card entity.
func (dc *DeckCreate) AddCards(c ...*Card) *DeckCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dc.AddCardIDs(ids...)
}

// SetRevision sets the "revision" edge to the Revision entity.
func (dc *DeckCreate) SetRevision(r *Revision) *DeckCreate {
	return dc.SetRevisionID(r.ID)
}

// Mutation returns the DeckMutation object of the builder.
func (dc *DeckCreate) Mutation() *DeckMutation {
	return dc.mutation
}

// Save creates the Deck in the database.
func (dc *DeckCreate) Save(ctx context.Context) (*Deck, error) {
	var (
		err  error
		node *Deck
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeckMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Deck)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DeckMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeckCreate) SaveX(ctx context.Context) *Deck {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeckCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeckCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeckCreate) check() error {
	if _, ok := dc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Deck.key"`)}
	}
	if v, ok := dc.mutation.Key(); ok {
		if err := deck.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Deck.key": %w`, err)}
		}
	}
	if _, ok := dc.mutation.RevisionID(); !ok {
		return &ValidationError{Name: "revision_id", err: errors.New(`ent: missing required field "Deck.revision_id"`)}
	}
	if _, ok := dc.mutation.RevisionID(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required edge "Deck.revision"`)}
	}
	return nil
}

func (dc *DeckCreate) sqlSave(ctx context.Context) (*Deck, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DeckCreate) createSpec() (*Deck, *sqlgraph.CreateSpec) {
	var (
		_node = &Deck{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deck.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deck.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Key(); ok {
		_spec.SetField(deck.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := dc.mutation.NameJa(); ok {
		_spec.SetField(deck.FieldNameJa, field.TypeString, value)
		_node.NameJa = value
	}
	if value, ok := dc.mutation.NameEn(); ok {
		_spec.SetField(deck.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if nodes := dc.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.CardsTable,
			Columns: []string{deck.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.RevisionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.RevisionTable,
			Columns: []string{deck.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RevisionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeckCreateBulk is the builder for creating many Deck entities in bulk.
type DeckCreateBulk struct {
	config
	builders []*DeckCreate
}

// Save creates the Deck entities in the database.
func (dcb *DeckCreateBulk) Save(ctx context.Context) ([]*Deck, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deck, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeckCreateBulk) SaveX(ctx context.Context) []*Deck {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeckCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeckCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
