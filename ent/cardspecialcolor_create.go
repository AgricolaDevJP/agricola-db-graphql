// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AgricolaDevJP/agricoladb-server/ent/card"
	"github.com/AgricolaDevJP/agricoladb-server/ent/cardspecialcolor"
)

// CardSpecialColorCreate is the builder for creating a CardSpecialColor entity.
type CardSpecialColorCreate struct {
	config
	mutation *CardSpecialColorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (cscc *CardSpecialColorCreate) SetKey(s string) *CardSpecialColorCreate {
	cscc.mutation.SetKey(s)
	return cscc
}

// SetNameJa sets the "name_ja" field.
func (cscc *CardSpecialColorCreate) SetNameJa(s string) *CardSpecialColorCreate {
	cscc.mutation.SetNameJa(s)
	return cscc
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (cscc *CardSpecialColorCreate) SetNillableNameJa(s *string) *CardSpecialColorCreate {
	if s != nil {
		cscc.SetNameJa(*s)
	}
	return cscc
}

// SetNameEn sets the "name_en" field.
func (cscc *CardSpecialColorCreate) SetNameEn(s string) *CardSpecialColorCreate {
	cscc.mutation.SetNameEn(s)
	return cscc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (cscc *CardSpecialColorCreate) SetNillableNameEn(s *string) *CardSpecialColorCreate {
	if s != nil {
		cscc.SetNameEn(*s)
	}
	return cscc
}

// SetID sets the "id" field.
func (cscc *CardSpecialColorCreate) SetID(i int) *CardSpecialColorCreate {
	cscc.mutation.SetID(i)
	return cscc
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (cscc *CardSpecialColorCreate) AddCardIDs(ids ...int) *CardSpecialColorCreate {
	cscc.mutation.AddCardIDs(ids...)
	return cscc
}

// AddCards adds the "cards" edges to the Card entity.
func (cscc *CardSpecialColorCreate) AddCards(c ...*Card) *CardSpecialColorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cscc.AddCardIDs(ids...)
}

// Mutation returns the CardSpecialColorMutation object of the builder.
func (cscc *CardSpecialColorCreate) Mutation() *CardSpecialColorMutation {
	return cscc.mutation
}

// Save creates the CardSpecialColor in the database.
func (cscc *CardSpecialColorCreate) Save(ctx context.Context) (*CardSpecialColor, error) {
	return withHooks[*CardSpecialColor, CardSpecialColorMutation](ctx, cscc.sqlSave, cscc.mutation, cscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cscc *CardSpecialColorCreate) SaveX(ctx context.Context) *CardSpecialColor {
	v, err := cscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscc *CardSpecialColorCreate) Exec(ctx context.Context) error {
	_, err := cscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscc *CardSpecialColorCreate) ExecX(ctx context.Context) {
	if err := cscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cscc *CardSpecialColorCreate) check() error {
	if _, ok := cscc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "CardSpecialColor.key"`)}
	}
	if v, ok := cscc.mutation.Key(); ok {
		if err := cardspecialcolor.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "CardSpecialColor.key": %w`, err)}
		}
	}
	return nil
}

func (cscc *CardSpecialColorCreate) sqlSave(ctx context.Context) (*CardSpecialColor, error) {
	if err := cscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cscc.mutation.id = &_node.ID
	cscc.mutation.done = true
	return _node, nil
}

func (cscc *CardSpecialColorCreate) createSpec() (*CardSpecialColor, *sqlgraph.CreateSpec) {
	var (
		_node = &CardSpecialColor{config: cscc.config}
		_spec = sqlgraph.NewCreateSpec(cardspecialcolor.Table, sqlgraph.NewFieldSpec(cardspecialcolor.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cscc.conflict
	if id, ok := cscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cscc.mutation.Key(); ok {
		_spec.SetField(cardspecialcolor.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cscc.mutation.NameJa(); ok {
		_spec.SetField(cardspecialcolor.FieldNameJa, field.TypeString, value)
		_node.NameJa = value
	}
	if value, ok := cscc.mutation.NameEn(); ok {
		_spec.SetField(cardspecialcolor.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if nodes := cscc.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardspecialcolor.CardsTable,
			Columns: []string{cardspecialcolor.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CardSpecialColor.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardSpecialColorUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (cscc *CardSpecialColorCreate) OnConflict(opts ...sql.ConflictOption) *CardSpecialColorUpsertOne {
	cscc.conflict = opts
	return &CardSpecialColorUpsertOne{
		create: cscc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscc *CardSpecialColorCreate) OnConflictColumns(columns ...string) *CardSpecialColorUpsertOne {
	cscc.conflict = append(cscc.conflict, sql.ConflictColumns(columns...))
	return &CardSpecialColorUpsertOne{
		create: cscc,
	}
}

type (
	// CardSpecialColorUpsertOne is the builder for "upsert"-ing
	//  one CardSpecialColor node.
	CardSpecialColorUpsertOne struct {
		create *CardSpecialColorCreate
	}

	// CardSpecialColorUpsert is the "OnConflict" setter.
	CardSpecialColorUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameJa sets the "name_ja" field.
func (u *CardSpecialColorUpsert) SetNameJa(v string) *CardSpecialColorUpsert {
	u.Set(cardspecialcolor.FieldNameJa, v)
	return u
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *CardSpecialColorUpsert) UpdateNameJa() *CardSpecialColorUpsert {
	u.SetExcluded(cardspecialcolor.FieldNameJa)
	return u
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *CardSpecialColorUpsert) ClearNameJa() *CardSpecialColorUpsert {
	u.SetNull(cardspecialcolor.FieldNameJa)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *CardSpecialColorUpsert) SetNameEn(v string) *CardSpecialColorUpsert {
	u.Set(cardspecialcolor.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CardSpecialColorUpsert) UpdateNameEn() *CardSpecialColorUpsert {
	u.SetExcluded(cardspecialcolor.FieldNameEn)
	return u
}

// ClearNameEn clears the value of the "name_en" field.
func (u *CardSpecialColorUpsert) ClearNameEn() *CardSpecialColorUpsert {
	u.SetNull(cardspecialcolor.FieldNameEn)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cardspecialcolor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardSpecialColorUpsertOne) UpdateNewValues() *CardSpecialColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cardspecialcolor.FieldID)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(cardspecialcolor.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CardSpecialColorUpsertOne) Ignore() *CardSpecialColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardSpecialColorUpsertOne) DoNothing() *CardSpecialColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardSpecialColorCreate.OnConflict
// documentation for more info.
func (u *CardSpecialColorUpsertOne) Update(set func(*CardSpecialColorUpsert)) *CardSpecialColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardSpecialColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameJa sets the "name_ja" field.
func (u *CardSpecialColorUpsertOne) SetNameJa(v string) *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *CardSpecialColorUpsertOne) UpdateNameJa() *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *CardSpecialColorUpsertOne) ClearNameJa() *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.ClearNameJa()
	})
}

// SetNameEn sets the "name_en" field.
func (u *CardSpecialColorUpsertOne) SetNameEn(v string) *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CardSpecialColorUpsertOne) UpdateNameEn() *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *CardSpecialColorUpsertOne) ClearNameEn() *CardSpecialColorUpsertOne {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.ClearNameEn()
	})
}

// Exec executes the query.
func (u *CardSpecialColorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardSpecialColorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardSpecialColorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CardSpecialColorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CardSpecialColorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CardSpecialColorCreateBulk is the builder for creating many CardSpecialColor entities in bulk.
type CardSpecialColorCreateBulk struct {
	config
	builders []*CardSpecialColorCreate
	conflict []sql.ConflictOption
}

// Save creates the CardSpecialColor entities in the database.
func (csccb *CardSpecialColorCreateBulk) Save(ctx context.Context) ([]*CardSpecialColor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(csccb.builders))
	nodes := make([]*CardSpecialColor, len(csccb.builders))
	mutators := make([]Mutator, len(csccb.builders))
	for i := range csccb.builders {
		func(i int, root context.Context) {
			builder := csccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardSpecialColorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csccb *CardSpecialColorCreateBulk) SaveX(ctx context.Context) []*CardSpecialColor {
	v, err := csccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csccb *CardSpecialColorCreateBulk) Exec(ctx context.Context) error {
	_, err := csccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csccb *CardSpecialColorCreateBulk) ExecX(ctx context.Context) {
	if err := csccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CardSpecialColor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardSpecialColorUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (csccb *CardSpecialColorCreateBulk) OnConflict(opts ...sql.ConflictOption) *CardSpecialColorUpsertBulk {
	csccb.conflict = opts
	return &CardSpecialColorUpsertBulk{
		create: csccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csccb *CardSpecialColorCreateBulk) OnConflictColumns(columns ...string) *CardSpecialColorUpsertBulk {
	csccb.conflict = append(csccb.conflict, sql.ConflictColumns(columns...))
	return &CardSpecialColorUpsertBulk{
		create: csccb,
	}
}

// CardSpecialColorUpsertBulk is the builder for "upsert"-ing
// a bulk of CardSpecialColor nodes.
type CardSpecialColorUpsertBulk struct {
	create *CardSpecialColorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cardspecialcolor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardSpecialColorUpsertBulk) UpdateNewValues() *CardSpecialColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cardspecialcolor.FieldID)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(cardspecialcolor.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CardSpecialColor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CardSpecialColorUpsertBulk) Ignore() *CardSpecialColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardSpecialColorUpsertBulk) DoNothing() *CardSpecialColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardSpecialColorCreateBulk.OnConflict
// documentation for more info.
func (u *CardSpecialColorUpsertBulk) Update(set func(*CardSpecialColorUpsert)) *CardSpecialColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardSpecialColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameJa sets the "name_ja" field.
func (u *CardSpecialColorUpsertBulk) SetNameJa(v string) *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *CardSpecialColorUpsertBulk) UpdateNameJa() *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *CardSpecialColorUpsertBulk) ClearNameJa() *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.ClearNameJa()
	})
}

// SetNameEn sets the "name_en" field.
func (u *CardSpecialColorUpsertBulk) SetNameEn(v string) *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *CardSpecialColorUpsertBulk) UpdateNameEn() *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *CardSpecialColorUpsertBulk) ClearNameEn() *CardSpecialColorUpsertBulk {
	return u.Update(func(s *CardSpecialColorUpsert) {
		s.ClearNameEn()
	})
}

// Exec executes the query.
func (u *CardSpecialColorUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CardSpecialColorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardSpecialColorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardSpecialColorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
