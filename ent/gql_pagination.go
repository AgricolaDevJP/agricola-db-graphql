// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agricoladb/ent/card"
	"agricoladb/ent/cardspecialcolor"
	"agricoladb/ent/cardtype"
	"agricoladb/ent/deck"
	"agricoladb/ent/product"
	"agricoladb/ent/revision"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CardEdge is the edge representation of Card.
type CardEdge struct {
	Node   *Card  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CardConnection is the connection containing edges to Card.
type CardConnection struct {
	Edges      []*CardEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CardConnection) build(nodes []*Card, pager *cardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Card
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Card {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Card {
			return nodes[i]
		}
	}
	c.Edges = make([]*CardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CardPaginateOption enables pagination customization.
type CardPaginateOption func(*cardPager) error

// WithCardOrder configures pagination ordering.
func WithCardOrder(order *CardOrder) CardPaginateOption {
	if order == nil {
		order = DefaultCardOrder
	}
	o := *order
	return func(pager *cardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCardFilter configures pagination filter.
func WithCardFilter(filter func(*CardQuery) (*CardQuery, error)) CardPaginateOption {
	return func(pager *cardPager) error {
		if filter == nil {
			return errors.New("CardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cardPager struct {
	order  *CardOrder
	filter func(*CardQuery) (*CardQuery, error)
}

func newCardPager(opts []CardPaginateOption) (*cardPager, error) {
	pager := &cardPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCardOrder
	}
	return pager, nil
}

func (p *cardPager) applyFilter(query *CardQuery) (*CardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cardPager) toCursor(c *Card) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cardPager) applyCursors(query *CardQuery, after, before *Cursor) *CardQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCardOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *cardPager) applyOrder(query *CardQuery, reverse bool) *CardQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCardOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCardOrder.Field.field))
	}
	return query
}

func (p *cardPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCardOrder.Field {
			b.Comma().Ident(DefaultCardOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Card.
func (c *CardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CardPaginateOption,
) (*CardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCardPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CardConnection{Edges: []*CardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CardOrderField defines the ordering field of Card.
type CardOrderField struct {
	field    string
	toCursor func(*Card) Cursor
}

// CardOrder defines the ordering of Card.
type CardOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CardOrderField `json:"field"`
}

// DefaultCardOrder is the default ordering of Card.
var DefaultCardOrder = &CardOrder{
	Direction: OrderDirectionAsc,
	Field: &CardOrderField{
		field: card.FieldID,
		toCursor: func(c *Card) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Card into CardEdge.
func (c *Card) ToEdge(order *CardOrder) *CardEdge {
	if order == nil {
		order = DefaultCardOrder
	}
	return &CardEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CardSpecialColorEdge is the edge representation of CardSpecialColor.
type CardSpecialColorEdge struct {
	Node   *CardSpecialColor `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// CardSpecialColorConnection is the connection containing edges to CardSpecialColor.
type CardSpecialColorConnection struct {
	Edges      []*CardSpecialColorEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *CardSpecialColorConnection) build(nodes []*CardSpecialColor, pager *cardspecialcolorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CardSpecialColor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CardSpecialColor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CardSpecialColor {
			return nodes[i]
		}
	}
	c.Edges = make([]*CardSpecialColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CardSpecialColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CardSpecialColorPaginateOption enables pagination customization.
type CardSpecialColorPaginateOption func(*cardspecialcolorPager) error

// WithCardSpecialColorOrder configures pagination ordering.
func WithCardSpecialColorOrder(order *CardSpecialColorOrder) CardSpecialColorPaginateOption {
	if order == nil {
		order = DefaultCardSpecialColorOrder
	}
	o := *order
	return func(pager *cardspecialcolorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCardSpecialColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCardSpecialColorFilter configures pagination filter.
func WithCardSpecialColorFilter(filter func(*CardSpecialColorQuery) (*CardSpecialColorQuery, error)) CardSpecialColorPaginateOption {
	return func(pager *cardspecialcolorPager) error {
		if filter == nil {
			return errors.New("CardSpecialColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cardspecialcolorPager struct {
	order  *CardSpecialColorOrder
	filter func(*CardSpecialColorQuery) (*CardSpecialColorQuery, error)
}

func newCardSpecialColorPager(opts []CardSpecialColorPaginateOption) (*cardspecialcolorPager, error) {
	pager := &cardspecialcolorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCardSpecialColorOrder
	}
	return pager, nil
}

func (p *cardspecialcolorPager) applyFilter(query *CardSpecialColorQuery) (*CardSpecialColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cardspecialcolorPager) toCursor(csc *CardSpecialColor) Cursor {
	return p.order.Field.toCursor(csc)
}

func (p *cardspecialcolorPager) applyCursors(query *CardSpecialColorQuery, after, before *Cursor) *CardSpecialColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCardSpecialColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *cardspecialcolorPager) applyOrder(query *CardSpecialColorQuery, reverse bool) *CardSpecialColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCardSpecialColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCardSpecialColorOrder.Field.field))
	}
	return query
}

func (p *cardspecialcolorPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCardSpecialColorOrder.Field {
			b.Comma().Ident(DefaultCardSpecialColorOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CardSpecialColor.
func (csc *CardSpecialColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CardSpecialColorPaginateOption,
) (*CardSpecialColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCardSpecialColorPager(opts)
	if err != nil {
		return nil, err
	}
	if csc, err = pager.applyFilter(csc); err != nil {
		return nil, err
	}
	conn := &CardSpecialColorConnection{Edges: []*CardSpecialColorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = csc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	csc = pager.applyCursors(csc, after, before)
	csc = pager.applyOrder(csc, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		csc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := csc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := csc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CardSpecialColorOrderField defines the ordering field of CardSpecialColor.
type CardSpecialColorOrderField struct {
	field    string
	toCursor func(*CardSpecialColor) Cursor
}

// CardSpecialColorOrder defines the ordering of CardSpecialColor.
type CardSpecialColorOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *CardSpecialColorOrderField `json:"field"`
}

// DefaultCardSpecialColorOrder is the default ordering of CardSpecialColor.
var DefaultCardSpecialColorOrder = &CardSpecialColorOrder{
	Direction: OrderDirectionAsc,
	Field: &CardSpecialColorOrderField{
		field: cardspecialcolor.FieldID,
		toCursor: func(csc *CardSpecialColor) Cursor {
			return Cursor{ID: csc.ID}
		},
	},
}

// ToEdge converts CardSpecialColor into CardSpecialColorEdge.
func (csc *CardSpecialColor) ToEdge(order *CardSpecialColorOrder) *CardSpecialColorEdge {
	if order == nil {
		order = DefaultCardSpecialColorOrder
	}
	return &CardSpecialColorEdge{
		Node:   csc,
		Cursor: order.Field.toCursor(csc),
	}
}

// CardTypeEdge is the edge representation of CardType.
type CardTypeEdge struct {
	Node   *CardType `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CardTypeConnection is the connection containing edges to CardType.
type CardTypeConnection struct {
	Edges      []*CardTypeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CardTypeConnection) build(nodes []*CardType, pager *cardtypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CardType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CardType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CardType {
			return nodes[i]
		}
	}
	c.Edges = make([]*CardTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CardTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CardTypePaginateOption enables pagination customization.
type CardTypePaginateOption func(*cardtypePager) error

// WithCardTypeOrder configures pagination ordering.
func WithCardTypeOrder(order *CardTypeOrder) CardTypePaginateOption {
	if order == nil {
		order = DefaultCardTypeOrder
	}
	o := *order
	return func(pager *cardtypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCardTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCardTypeFilter configures pagination filter.
func WithCardTypeFilter(filter func(*CardTypeQuery) (*CardTypeQuery, error)) CardTypePaginateOption {
	return func(pager *cardtypePager) error {
		if filter == nil {
			return errors.New("CardTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cardtypePager struct {
	order  *CardTypeOrder
	filter func(*CardTypeQuery) (*CardTypeQuery, error)
}

func newCardTypePager(opts []CardTypePaginateOption) (*cardtypePager, error) {
	pager := &cardtypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCardTypeOrder
	}
	return pager, nil
}

func (p *cardtypePager) applyFilter(query *CardTypeQuery) (*CardTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cardtypePager) toCursor(ct *CardType) Cursor {
	return p.order.Field.toCursor(ct)
}

func (p *cardtypePager) applyCursors(query *CardTypeQuery, after, before *Cursor) *CardTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCardTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *cardtypePager) applyOrder(query *CardTypeQuery, reverse bool) *CardTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCardTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCardTypeOrder.Field.field))
	}
	return query
}

func (p *cardtypePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCardTypeOrder.Field {
			b.Comma().Ident(DefaultCardTypeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CardType.
func (ct *CardTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CardTypePaginateOption,
) (*CardTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCardTypePager(opts)
	if err != nil {
		return nil, err
	}
	if ct, err = pager.applyFilter(ct); err != nil {
		return nil, err
	}
	conn := &CardTypeConnection{Edges: []*CardTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ct = pager.applyCursors(ct, after, before)
	ct = pager.applyOrder(ct, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CardTypeOrderField defines the ordering field of CardType.
type CardTypeOrderField struct {
	field    string
	toCursor func(*CardType) Cursor
}

// CardTypeOrder defines the ordering of CardType.
type CardTypeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CardTypeOrderField `json:"field"`
}

// DefaultCardTypeOrder is the default ordering of CardType.
var DefaultCardTypeOrder = &CardTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &CardTypeOrderField{
		field: cardtype.FieldID,
		toCursor: func(ct *CardType) Cursor {
			return Cursor{ID: ct.ID}
		},
	},
}

// ToEdge converts CardType into CardTypeEdge.
func (ct *CardType) ToEdge(order *CardTypeOrder) *CardTypeEdge {
	if order == nil {
		order = DefaultCardTypeOrder
	}
	return &CardTypeEdge{
		Node:   ct,
		Cursor: order.Field.toCursor(ct),
	}
}

// DeckEdge is the edge representation of Deck.
type DeckEdge struct {
	Node   *Deck  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// DeckConnection is the connection containing edges to Deck.
type DeckConnection struct {
	Edges      []*DeckEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *DeckConnection) build(nodes []*Deck, pager *deckPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Deck
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Deck {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Deck {
			return nodes[i]
		}
	}
	c.Edges = make([]*DeckEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DeckEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DeckPaginateOption enables pagination customization.
type DeckPaginateOption func(*deckPager) error

// WithDeckOrder configures pagination ordering.
func WithDeckOrder(order *DeckOrder) DeckPaginateOption {
	if order == nil {
		order = DefaultDeckOrder
	}
	o := *order
	return func(pager *deckPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDeckOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDeckFilter configures pagination filter.
func WithDeckFilter(filter func(*DeckQuery) (*DeckQuery, error)) DeckPaginateOption {
	return func(pager *deckPager) error {
		if filter == nil {
			return errors.New("DeckQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type deckPager struct {
	order  *DeckOrder
	filter func(*DeckQuery) (*DeckQuery, error)
}

func newDeckPager(opts []DeckPaginateOption) (*deckPager, error) {
	pager := &deckPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDeckOrder
	}
	return pager, nil
}

func (p *deckPager) applyFilter(query *DeckQuery) (*DeckQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *deckPager) toCursor(d *Deck) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *deckPager) applyCursors(query *DeckQuery, after, before *Cursor) *DeckQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDeckOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *deckPager) applyOrder(query *DeckQuery, reverse bool) *DeckQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDeckOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDeckOrder.Field.field))
	}
	return query
}

func (p *deckPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDeckOrder.Field {
			b.Comma().Ident(DefaultDeckOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Deck.
func (d *DeckQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DeckPaginateOption,
) (*DeckConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDeckPager(opts)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DeckConnection{Edges: []*DeckEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = d.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DeckOrderField defines the ordering field of Deck.
type DeckOrderField struct {
	field    string
	toCursor func(*Deck) Cursor
}

// DeckOrder defines the ordering of Deck.
type DeckOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *DeckOrderField `json:"field"`
}

// DefaultDeckOrder is the default ordering of Deck.
var DefaultDeckOrder = &DeckOrder{
	Direction: OrderDirectionAsc,
	Field: &DeckOrderField{
		field: deck.FieldID,
		toCursor: func(d *Deck) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Deck into DeckEdge.
func (d *Deck) ToEdge(order *DeckOrder) *DeckEdge {
	if order == nil {
		order = DefaultDeckOrder
	}
	return &DeckEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// ProductEdge is the edge representation of Product.
type ProductEdge struct {
	Node   *Product `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProductConnection is the connection containing edges to Product.
type ProductConnection struct {
	Edges      []*ProductEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ProductConnection) build(nodes []*Product, pager *productPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Product
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Product {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Product {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProductEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProductEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProductPaginateOption enables pagination customization.
type ProductPaginateOption func(*productPager) error

// WithProductOrder configures pagination ordering.
func WithProductOrder(order *ProductOrder) ProductPaginateOption {
	if order == nil {
		order = DefaultProductOrder
	}
	o := *order
	return func(pager *productPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProductOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProductFilter configures pagination filter.
func WithProductFilter(filter func(*ProductQuery) (*ProductQuery, error)) ProductPaginateOption {
	return func(pager *productPager) error {
		if filter == nil {
			return errors.New("ProductQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type productPager struct {
	order  *ProductOrder
	filter func(*ProductQuery) (*ProductQuery, error)
}

func newProductPager(opts []ProductPaginateOption) (*productPager, error) {
	pager := &productPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProductOrder
	}
	return pager, nil
}

func (p *productPager) applyFilter(query *ProductQuery) (*ProductQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *productPager) toCursor(pr *Product) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *productPager) applyCursors(query *ProductQuery, after, before *Cursor) *ProductQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProductOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *productPager) applyOrder(query *ProductQuery, reverse bool) *ProductQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProductOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProductOrder.Field.field))
	}
	return query
}

func (p *productPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProductOrder.Field {
			b.Comma().Ident(DefaultProductOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Product.
func (pr *ProductQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProductPaginateOption,
) (*ProductConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProductPager(opts)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProductConnection{Edges: []*ProductEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pr = pager.applyCursors(pr, after, before)
	pr = pager.applyOrder(pr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProductOrderField defines the ordering field of Product.
type ProductOrderField struct {
	field    string
	toCursor func(*Product) Cursor
}

// ProductOrder defines the ordering of Product.
type ProductOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProductOrderField `json:"field"`
}

// DefaultProductOrder is the default ordering of Product.
var DefaultProductOrder = &ProductOrder{
	Direction: OrderDirectionAsc,
	Field: &ProductOrderField{
		field: product.FieldID,
		toCursor: func(pr *Product) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Product into ProductEdge.
func (pr *Product) ToEdge(order *ProductOrder) *ProductEdge {
	if order == nil {
		order = DefaultProductOrder
	}
	return &ProductEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// RevisionEdge is the edge representation of Revision.
type RevisionEdge struct {
	Node   *Revision `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// RevisionConnection is the connection containing edges to Revision.
type RevisionConnection struct {
	Edges      []*RevisionEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *RevisionConnection) build(nodes []*Revision, pager *revisionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Revision
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Revision {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Revision {
			return nodes[i]
		}
	}
	c.Edges = make([]*RevisionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RevisionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RevisionPaginateOption enables pagination customization.
type RevisionPaginateOption func(*revisionPager) error

// WithRevisionOrder configures pagination ordering.
func WithRevisionOrder(order *RevisionOrder) RevisionPaginateOption {
	if order == nil {
		order = DefaultRevisionOrder
	}
	o := *order
	return func(pager *revisionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRevisionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRevisionFilter configures pagination filter.
func WithRevisionFilter(filter func(*RevisionQuery) (*RevisionQuery, error)) RevisionPaginateOption {
	return func(pager *revisionPager) error {
		if filter == nil {
			return errors.New("RevisionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type revisionPager struct {
	order  *RevisionOrder
	filter func(*RevisionQuery) (*RevisionQuery, error)
}

func newRevisionPager(opts []RevisionPaginateOption) (*revisionPager, error) {
	pager := &revisionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRevisionOrder
	}
	return pager, nil
}

func (p *revisionPager) applyFilter(query *RevisionQuery) (*RevisionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *revisionPager) toCursor(r *Revision) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *revisionPager) applyCursors(query *RevisionQuery, after, before *Cursor) *RevisionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultRevisionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *revisionPager) applyOrder(query *RevisionQuery, reverse bool) *RevisionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultRevisionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultRevisionOrder.Field.field))
	}
	return query
}

func (p *revisionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRevisionOrder.Field {
			b.Comma().Ident(DefaultRevisionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Revision.
func (r *RevisionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RevisionPaginateOption,
) (*RevisionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRevisionPager(opts)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RevisionConnection{Edges: []*RevisionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// RevisionOrderField defines the ordering field of Revision.
type RevisionOrderField struct {
	field    string
	toCursor func(*Revision) Cursor
}

// RevisionOrder defines the ordering of Revision.
type RevisionOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *RevisionOrderField `json:"field"`
}

// DefaultRevisionOrder is the default ordering of Revision.
var DefaultRevisionOrder = &RevisionOrder{
	Direction: OrderDirectionAsc,
	Field: &RevisionOrderField{
		field: revision.FieldID,
		toCursor: func(r *Revision) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Revision into RevisionEdge.
func (r *Revision) ToEdge(order *RevisionOrder) *RevisionEdge {
	if order == nil {
		order = DefaultRevisionOrder
	}
	return &RevisionEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}
