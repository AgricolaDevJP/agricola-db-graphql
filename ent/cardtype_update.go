// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AgricolaDevJP/agricoladb-server/ent/card"
	"github.com/AgricolaDevJP/agricoladb-server/ent/cardtype"
	"github.com/AgricolaDevJP/agricoladb-server/ent/predicate"
)

// CardTypeUpdate is the builder for updating CardType entities.
type CardTypeUpdate struct {
	config
	hooks    []Hook
	mutation *CardTypeMutation
}

// Where appends a list predicates to the CardTypeUpdate builder.
func (ctu *CardTypeUpdate) Where(ps ...predicate.CardType) *CardTypeUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetNameJa sets the "name_ja" field.
func (ctu *CardTypeUpdate) SetNameJa(s string) *CardTypeUpdate {
	ctu.mutation.SetNameJa(s)
	return ctu
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (ctu *CardTypeUpdate) SetNillableNameJa(s *string) *CardTypeUpdate {
	if s != nil {
		ctu.SetNameJa(*s)
	}
	return ctu
}

// ClearNameJa clears the value of the "name_ja" field.
func (ctu *CardTypeUpdate) ClearNameJa() *CardTypeUpdate {
	ctu.mutation.ClearNameJa()
	return ctu
}

// SetNameEn sets the "name_en" field.
func (ctu *CardTypeUpdate) SetNameEn(s string) *CardTypeUpdate {
	ctu.mutation.SetNameEn(s)
	return ctu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (ctu *CardTypeUpdate) SetNillableNameEn(s *string) *CardTypeUpdate {
	if s != nil {
		ctu.SetNameEn(*s)
	}
	return ctu
}

// ClearNameEn clears the value of the "name_en" field.
func (ctu *CardTypeUpdate) ClearNameEn() *CardTypeUpdate {
	ctu.mutation.ClearNameEn()
	return ctu
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (ctu *CardTypeUpdate) AddCardIDs(ids ...int) *CardTypeUpdate {
	ctu.mutation.AddCardIDs(ids...)
	return ctu
}

// AddCards adds the "cards" edges to the Card entity.
func (ctu *CardTypeUpdate) AddCards(c ...*Card) *CardTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddCardIDs(ids...)
}

// Mutation returns the CardTypeMutation object of the builder.
func (ctu *CardTypeUpdate) Mutation() *CardTypeMutation {
	return ctu.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (ctu *CardTypeUpdate) ClearCards() *CardTypeUpdate {
	ctu.mutation.ClearCards()
	return ctu
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (ctu *CardTypeUpdate) RemoveCardIDs(ids ...int) *CardTypeUpdate {
	ctu.mutation.RemoveCardIDs(ids...)
	return ctu
}

// RemoveCards removes "cards" edges to Card entities.
func (ctu *CardTypeUpdate) RemoveCards(c ...*Card) *CardTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CardTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CardTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CardTypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CardTypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *CardTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cardtype.Table, cardtype.Columns, sqlgraph.NewFieldSpec(cardtype.FieldID, field.TypeInt))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.NameJa(); ok {
		_spec.SetField(cardtype.FieldNameJa, field.TypeString, value)
	}
	if ctu.mutation.NameJaCleared() {
		_spec.ClearField(cardtype.FieldNameJa, field.TypeString)
	}
	if value, ok := ctu.mutation.NameEn(); ok {
		_spec.SetField(cardtype.FieldNameEn, field.TypeString, value)
	}
	if ctu.mutation.NameEnCleared() {
		_spec.ClearField(cardtype.FieldNameEn, field.TypeString)
	}
	if ctu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedCardsIDs(); len(nodes) > 0 && !ctu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CardTypeUpdateOne is the builder for updating a single CardType entity.
type CardTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardTypeMutation
}

// SetNameJa sets the "name_ja" field.
func (ctuo *CardTypeUpdateOne) SetNameJa(s string) *CardTypeUpdateOne {
	ctuo.mutation.SetNameJa(s)
	return ctuo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (ctuo *CardTypeUpdateOne) SetNillableNameJa(s *string) *CardTypeUpdateOne {
	if s != nil {
		ctuo.SetNameJa(*s)
	}
	return ctuo
}

// ClearNameJa clears the value of the "name_ja" field.
func (ctuo *CardTypeUpdateOne) ClearNameJa() *CardTypeUpdateOne {
	ctuo.mutation.ClearNameJa()
	return ctuo
}

// SetNameEn sets the "name_en" field.
func (ctuo *CardTypeUpdateOne) SetNameEn(s string) *CardTypeUpdateOne {
	ctuo.mutation.SetNameEn(s)
	return ctuo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (ctuo *CardTypeUpdateOne) SetNillableNameEn(s *string) *CardTypeUpdateOne {
	if s != nil {
		ctuo.SetNameEn(*s)
	}
	return ctuo
}

// ClearNameEn clears the value of the "name_en" field.
func (ctuo *CardTypeUpdateOne) ClearNameEn() *CardTypeUpdateOne {
	ctuo.mutation.ClearNameEn()
	return ctuo
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (ctuo *CardTypeUpdateOne) AddCardIDs(ids ...int) *CardTypeUpdateOne {
	ctuo.mutation.AddCardIDs(ids...)
	return ctuo
}

// AddCards adds the "cards" edges to the Card entity.
func (ctuo *CardTypeUpdateOne) AddCards(c ...*Card) *CardTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddCardIDs(ids...)
}

// Mutation returns the CardTypeMutation object of the builder.
func (ctuo *CardTypeUpdateOne) Mutation() *CardTypeMutation {
	return ctuo.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (ctuo *CardTypeUpdateOne) ClearCards() *CardTypeUpdateOne {
	ctuo.mutation.ClearCards()
	return ctuo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (ctuo *CardTypeUpdateOne) RemoveCardIDs(ids ...int) *CardTypeUpdateOne {
	ctuo.mutation.RemoveCardIDs(ids...)
	return ctuo
}

// RemoveCards removes "cards" edges to Card entities.
func (ctuo *CardTypeUpdateOne) RemoveCards(c ...*Card) *CardTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveCardIDs(ids...)
}

// Where appends a list predicates to the CardTypeUpdate builder.
func (ctuo *CardTypeUpdateOne) Where(ps ...predicate.CardType) *CardTypeUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CardTypeUpdateOne) Select(field string, fields ...string) *CardTypeUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CardType entity.
func (ctuo *CardTypeUpdateOne) Save(ctx context.Context) (*CardType, error) {
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CardTypeUpdateOne) SaveX(ctx context.Context) *CardType {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CardTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CardTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *CardTypeUpdateOne) sqlSave(ctx context.Context) (_node *CardType, err error) {
	_spec := sqlgraph.NewUpdateSpec(cardtype.Table, cardtype.Columns, sqlgraph.NewFieldSpec(cardtype.FieldID, field.TypeInt))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CardType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cardtype.FieldID)
		for _, f := range fields {
			if !cardtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cardtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.NameJa(); ok {
		_spec.SetField(cardtype.FieldNameJa, field.TypeString, value)
	}
	if ctuo.mutation.NameJaCleared() {
		_spec.ClearField(cardtype.FieldNameJa, field.TypeString)
	}
	if value, ok := ctuo.mutation.NameEn(); ok {
		_spec.SetField(cardtype.FieldNameEn, field.TypeString, value)
	}
	if ctuo.mutation.NameEnCleared() {
		_spec.ClearField(cardtype.FieldNameEn, field.TypeString)
	}
	if ctuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !ctuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cardtype.CardsTable,
			Columns: []string{cardtype.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CardType{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
