// Code generated by ent, DO NOT EDIT.

package card

import (
	"agricoladb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LiteralID applies equality check predicate on the "literal_id" field. It's identical to LiteralIDEQ.
func LiteralID(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiteralID), v))
	})
}

// RevisionID applies equality check predicate on the "revision_id" field. It's identical to RevisionIDEQ.
func RevisionID(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevisionID), v))
	})
}

// PrintedID applies equality check predicate on the "printed_id" field. It's identical to PrintedIDEQ.
func PrintedID(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintedID), v))
	})
}

// PlayAgricolaCardID applies equality check predicate on the "play_agricola_card_id" field. It's identical to PlayAgricolaCardIDEQ.
func PlayAgricolaCardID(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayAgricolaCardID), v))
	})
}

// DeckID applies equality check predicate on the "deck_id" field. It's identical to DeckIDEQ.
func DeckID(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeckID), v))
	})
}

// CardTypeID applies equality check predicate on the "card_type_id" field. It's identical to CardTypeIDEQ.
func CardTypeID(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardTypeID), v))
	})
}

// CardSpecialColorID applies equality check predicate on the "card_special_color_id" field. It's identical to CardSpecialColorIDEQ.
func CardSpecialColorID(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardSpecialColorID), v))
	})
}

// NameJa applies equality check predicate on the "name_ja" field. It's identical to NameJaEQ.
func NameJa(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameJa), v))
	})
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameEn), v))
	})
}

// MinPlayersNumber applies equality check predicate on the "min_players_number" field. It's identical to MinPlayersNumberEQ.
func MinPlayersNumber(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinPlayersNumber), v))
	})
}

// Prerequisite applies equality check predicate on the "prerequisite" field. It's identical to PrerequisiteEQ.
func Prerequisite(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrerequisite), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// FunctionText applies equality check predicate on the "function_text" field. It's identical to FunctionTextEQ.
func FunctionText(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionText), v))
	})
}

// IsOfficialJa applies equality check predicate on the "is_official_ja" field. It's identical to IsOfficialJaEQ.
func IsOfficialJa(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOfficialJa), v))
	})
}

// VictoryPoint applies equality check predicate on the "victory_point" field. It's identical to VictoryPointEQ.
func VictoryPoint(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVictoryPoint), v))
	})
}

// IsVariableVictoryPoint applies equality check predicate on the "is_variable_victory_point" field. It's identical to IsVariableVictoryPointEQ.
func IsVariableVictoryPoint(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVariableVictoryPoint), v))
	})
}

// HasArrrow applies equality check predicate on the "has_arrrow" field. It's identical to HasArrrowEQ.
func HasArrrow(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasArrrow), v))
	})
}

// HasBonusPointIcon applies equality check predicate on the "has_bonus_point_icon" field. It's identical to HasBonusPointIconEQ.
func HasBonusPointIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBonusPointIcon), v))
	})
}

// HasNegativeBonusPointIcon applies equality check predicate on the "has_negative_bonus_point_icon" field. It's identical to HasNegativeBonusPointIconEQ.
func HasNegativeBonusPointIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasNegativeBonusPointIcon), v))
	})
}

// HasPanIcon applies equality check predicate on the "has_pan_icon" field. It's identical to HasPanIconEQ.
func HasPanIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPanIcon), v))
	})
}

// HasBreadIcon applies equality check predicate on the "has_bread_icon" field. It's identical to HasBreadIconEQ.
func HasBreadIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBreadIcon), v))
	})
}

// HasFarmPlannerIcon applies equality check predicate on the "has_farm_planner_icon" field. It's identical to HasFarmPlannerIconEQ.
func HasFarmPlannerIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFarmPlannerIcon), v))
	})
}

// HasActionsBoosterIcon applies equality check predicate on the "has_actions_booster_icon" field. It's identical to HasActionsBoosterIconEQ.
func HasActionsBoosterIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasActionsBoosterIcon), v))
	})
}

// HasPointsProviderIcon applies equality check predicate on the "has_points_provider_icon" field. It's identical to HasPointsProviderIconEQ.
func HasPointsProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPointsProviderIcon), v))
	})
}

// HasGoodsProviderIcon applies equality check predicate on the "has_goods_provider_icon" field. It's identical to HasGoodsProviderIconEQ.
func HasGoodsProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasGoodsProviderIcon), v))
	})
}

// HasFoodProviderIcon applies equality check predicate on the "has_food_provider_icon" field. It's identical to HasFoodProviderIconEQ.
func HasFoodProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFoodProviderIcon), v))
	})
}

// HasCropProviderIcon applies equality check predicate on the "has_crop_provider_icon" field. It's identical to HasCropProviderIconEQ.
func HasCropProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasCropProviderIcon), v))
	})
}

// HasBuildingResourceProviderIcon applies equality check predicate on the "has_building_resource_provider_icon" field. It's identical to HasBuildingResourceProviderIconEQ.
func HasBuildingResourceProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBuildingResourceProviderIcon), v))
	})
}

// HasLivestockProviderIcon applies equality check predicate on the "has_livestock_provider_icon" field. It's identical to HasLivestockProviderIconEQ.
func HasLivestockProviderIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasLivestockProviderIcon), v))
	})
}

// HasCutPeatIcon applies equality check predicate on the "has_cut_peat_icon" field. It's identical to HasCutPeatIconEQ.
func HasCutPeatIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasCutPeatIcon), v))
	})
}

// HasFellTreesIcon applies equality check predicate on the "has_fell_trees_icon" field. It's identical to HasFellTreesIconEQ.
func HasFellTreesIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFellTreesIcon), v))
	})
}

// HasSlashAndBurnIcon applies equality check predicate on the "has_slash_and_burn_icon" field. It's identical to HasSlashAndBurnIconEQ.
func HasSlashAndBurnIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasSlashAndBurnIcon), v))
	})
}

// HasHiringFareIcon applies equality check predicate on the "has_hiring_fare_icon" field. It's identical to HasHiringFareIconEQ.
func HasHiringFareIcon(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasHiringFareIcon), v))
	})
}

// LiteralIDEQ applies the EQ predicate on the "literal_id" field.
func LiteralIDEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiteralID), v))
	})
}

// LiteralIDNEQ applies the NEQ predicate on the "literal_id" field.
func LiteralIDNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiteralID), v))
	})
}

// LiteralIDIn applies the In predicate on the "literal_id" field.
func LiteralIDIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiteralID), v...))
	})
}

// LiteralIDNotIn applies the NotIn predicate on the "literal_id" field.
func LiteralIDNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiteralID), v...))
	})
}

// LiteralIDGT applies the GT predicate on the "literal_id" field.
func LiteralIDGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiteralID), v))
	})
}

// LiteralIDGTE applies the GTE predicate on the "literal_id" field.
func LiteralIDGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiteralID), v))
	})
}

// LiteralIDLT applies the LT predicate on the "literal_id" field.
func LiteralIDLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiteralID), v))
	})
}

// LiteralIDLTE applies the LTE predicate on the "literal_id" field.
func LiteralIDLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiteralID), v))
	})
}

// LiteralIDContains applies the Contains predicate on the "literal_id" field.
func LiteralIDContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLiteralID), v))
	})
}

// LiteralIDHasPrefix applies the HasPrefix predicate on the "literal_id" field.
func LiteralIDHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLiteralID), v))
	})
}

// LiteralIDHasSuffix applies the HasSuffix predicate on the "literal_id" field.
func LiteralIDHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLiteralID), v))
	})
}

// LiteralIDEqualFold applies the EqualFold predicate on the "literal_id" field.
func LiteralIDEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLiteralID), v))
	})
}

// LiteralIDContainsFold applies the ContainsFold predicate on the "literal_id" field.
func LiteralIDContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLiteralID), v))
	})
}

// RevisionIDEQ applies the EQ predicate on the "revision_id" field.
func RevisionIDEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevisionID), v))
	})
}

// RevisionIDNEQ applies the NEQ predicate on the "revision_id" field.
func RevisionIDNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevisionID), v))
	})
}

// RevisionIDIn applies the In predicate on the "revision_id" field.
func RevisionIDIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRevisionID), v...))
	})
}

// RevisionIDNotIn applies the NotIn predicate on the "revision_id" field.
func RevisionIDNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRevisionID), v...))
	})
}

// PrintedIDEQ applies the EQ predicate on the "printed_id" field.
func PrintedIDEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintedID), v))
	})
}

// PrintedIDNEQ applies the NEQ predicate on the "printed_id" field.
func PrintedIDNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrintedID), v))
	})
}

// PrintedIDIn applies the In predicate on the "printed_id" field.
func PrintedIDIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrintedID), v...))
	})
}

// PrintedIDNotIn applies the NotIn predicate on the "printed_id" field.
func PrintedIDNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrintedID), v...))
	})
}

// PrintedIDGT applies the GT predicate on the "printed_id" field.
func PrintedIDGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrintedID), v))
	})
}

// PrintedIDGTE applies the GTE predicate on the "printed_id" field.
func PrintedIDGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrintedID), v))
	})
}

// PrintedIDLT applies the LT predicate on the "printed_id" field.
func PrintedIDLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrintedID), v))
	})
}

// PrintedIDLTE applies the LTE predicate on the "printed_id" field.
func PrintedIDLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrintedID), v))
	})
}

// PrintedIDContains applies the Contains predicate on the "printed_id" field.
func PrintedIDContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrintedID), v))
	})
}

// PrintedIDHasPrefix applies the HasPrefix predicate on the "printed_id" field.
func PrintedIDHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrintedID), v))
	})
}

// PrintedIDHasSuffix applies the HasSuffix predicate on the "printed_id" field.
func PrintedIDHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrintedID), v))
	})
}

// PrintedIDIsNil applies the IsNil predicate on the "printed_id" field.
func PrintedIDIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrintedID)))
	})
}

// PrintedIDNotNil applies the NotNil predicate on the "printed_id" field.
func PrintedIDNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrintedID)))
	})
}

// PrintedIDEqualFold applies the EqualFold predicate on the "printed_id" field.
func PrintedIDEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrintedID), v))
	})
}

// PrintedIDContainsFold applies the ContainsFold predicate on the "printed_id" field.
func PrintedIDContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrintedID), v))
	})
}

// PlayAgricolaCardIDEQ applies the EQ predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDNEQ applies the NEQ predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDIn applies the In predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlayAgricolaCardID), v...))
	})
}

// PlayAgricolaCardIDNotIn applies the NotIn predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlayAgricolaCardID), v...))
	})
}

// PlayAgricolaCardIDGT applies the GT predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDGTE applies the GTE predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDLT applies the LT predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDLTE applies the LTE predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDContains applies the Contains predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDHasPrefix applies the HasPrefix predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDHasSuffix applies the HasSuffix predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDIsNil applies the IsNil predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlayAgricolaCardID)))
	})
}

// PlayAgricolaCardIDNotNil applies the NotNil predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlayAgricolaCardID)))
	})
}

// PlayAgricolaCardIDEqualFold applies the EqualFold predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlayAgricolaCardID), v))
	})
}

// PlayAgricolaCardIDContainsFold applies the ContainsFold predicate on the "play_agricola_card_id" field.
func PlayAgricolaCardIDContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlayAgricolaCardID), v))
	})
}

// DeckIDEQ applies the EQ predicate on the "deck_id" field.
func DeckIDEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeckID), v))
	})
}

// DeckIDNEQ applies the NEQ predicate on the "deck_id" field.
func DeckIDNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeckID), v))
	})
}

// DeckIDIn applies the In predicate on the "deck_id" field.
func DeckIDIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeckID), v...))
	})
}

// DeckIDNotIn applies the NotIn predicate on the "deck_id" field.
func DeckIDNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeckID), v...))
	})
}

// DeckIDIsNil applies the IsNil predicate on the "deck_id" field.
func DeckIDIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeckID)))
	})
}

// DeckIDNotNil applies the NotNil predicate on the "deck_id" field.
func DeckIDNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeckID)))
	})
}

// CardTypeIDEQ applies the EQ predicate on the "card_type_id" field.
func CardTypeIDEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardTypeID), v))
	})
}

// CardTypeIDNEQ applies the NEQ predicate on the "card_type_id" field.
func CardTypeIDNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardTypeID), v))
	})
}

// CardTypeIDIn applies the In predicate on the "card_type_id" field.
func CardTypeIDIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCardTypeID), v...))
	})
}

// CardTypeIDNotIn applies the NotIn predicate on the "card_type_id" field.
func CardTypeIDNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCardTypeID), v...))
	})
}

// CardSpecialColorIDEQ applies the EQ predicate on the "card_special_color_id" field.
func CardSpecialColorIDEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardSpecialColorID), v))
	})
}

// CardSpecialColorIDNEQ applies the NEQ predicate on the "card_special_color_id" field.
func CardSpecialColorIDNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardSpecialColorID), v))
	})
}

// CardSpecialColorIDIn applies the In predicate on the "card_special_color_id" field.
func CardSpecialColorIDIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCardSpecialColorID), v...))
	})
}

// CardSpecialColorIDNotIn applies the NotIn predicate on the "card_special_color_id" field.
func CardSpecialColorIDNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCardSpecialColorID), v...))
	})
}

// CardSpecialColorIDIsNil applies the IsNil predicate on the "card_special_color_id" field.
func CardSpecialColorIDIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCardSpecialColorID)))
	})
}

// CardSpecialColorIDNotNil applies the NotNil predicate on the "card_special_color_id" field.
func CardSpecialColorIDNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCardSpecialColorID)))
	})
}

// NameJaEQ applies the EQ predicate on the "name_ja" field.
func NameJaEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameJa), v))
	})
}

// NameJaNEQ applies the NEQ predicate on the "name_ja" field.
func NameJaNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameJa), v))
	})
}

// NameJaIn applies the In predicate on the "name_ja" field.
func NameJaIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNameJa), v...))
	})
}

// NameJaNotIn applies the NotIn predicate on the "name_ja" field.
func NameJaNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNameJa), v...))
	})
}

// NameJaGT applies the GT predicate on the "name_ja" field.
func NameJaGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameJa), v))
	})
}

// NameJaGTE applies the GTE predicate on the "name_ja" field.
func NameJaGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameJa), v))
	})
}

// NameJaLT applies the LT predicate on the "name_ja" field.
func NameJaLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameJa), v))
	})
}

// NameJaLTE applies the LTE predicate on the "name_ja" field.
func NameJaLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameJa), v))
	})
}

// NameJaContains applies the Contains predicate on the "name_ja" field.
func NameJaContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameJa), v))
	})
}

// NameJaHasPrefix applies the HasPrefix predicate on the "name_ja" field.
func NameJaHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameJa), v))
	})
}

// NameJaHasSuffix applies the HasSuffix predicate on the "name_ja" field.
func NameJaHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameJa), v))
	})
}

// NameJaIsNil applies the IsNil predicate on the "name_ja" field.
func NameJaIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNameJa)))
	})
}

// NameJaNotNil applies the NotNil predicate on the "name_ja" field.
func NameJaNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNameJa)))
	})
}

// NameJaEqualFold applies the EqualFold predicate on the "name_ja" field.
func NameJaEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameJa), v))
	})
}

// NameJaContainsFold applies the ContainsFold predicate on the "name_ja" field.
func NameJaContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameJa), v))
	})
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameEn), v))
	})
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameEn), v))
	})
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNameEn), v...))
	})
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNameEn), v...))
	})
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameEn), v))
	})
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameEn), v))
	})
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameEn), v))
	})
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameEn), v))
	})
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameEn), v))
	})
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameEn), v))
	})
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameEn), v))
	})
}

// NameEnIsNil applies the IsNil predicate on the "name_en" field.
func NameEnIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNameEn)))
	})
}

// NameEnNotNil applies the NotNil predicate on the "name_en" field.
func NameEnNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNameEn)))
	})
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameEn), v))
	})
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameEn), v))
	})
}

// MinPlayersNumberEQ applies the EQ predicate on the "min_players_number" field.
func MinPlayersNumberEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberNEQ applies the NEQ predicate on the "min_players_number" field.
func MinPlayersNumberNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberIn applies the In predicate on the "min_players_number" field.
func MinPlayersNumberIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinPlayersNumber), v...))
	})
}

// MinPlayersNumberNotIn applies the NotIn predicate on the "min_players_number" field.
func MinPlayersNumberNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinPlayersNumber), v...))
	})
}

// MinPlayersNumberGT applies the GT predicate on the "min_players_number" field.
func MinPlayersNumberGT(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberGTE applies the GTE predicate on the "min_players_number" field.
func MinPlayersNumberGTE(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberLT applies the LT predicate on the "min_players_number" field.
func MinPlayersNumberLT(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberLTE applies the LTE predicate on the "min_players_number" field.
func MinPlayersNumberLTE(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinPlayersNumber), v))
	})
}

// MinPlayersNumberIsNil applies the IsNil predicate on the "min_players_number" field.
func MinPlayersNumberIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinPlayersNumber)))
	})
}

// MinPlayersNumberNotNil applies the NotNil predicate on the "min_players_number" field.
func MinPlayersNumberNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinPlayersNumber)))
	})
}

// PrerequisiteEQ applies the EQ predicate on the "prerequisite" field.
func PrerequisiteEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteNEQ applies the NEQ predicate on the "prerequisite" field.
func PrerequisiteNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteIn applies the In predicate on the "prerequisite" field.
func PrerequisiteIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrerequisite), v...))
	})
}

// PrerequisiteNotIn applies the NotIn predicate on the "prerequisite" field.
func PrerequisiteNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrerequisite), v...))
	})
}

// PrerequisiteGT applies the GT predicate on the "prerequisite" field.
func PrerequisiteGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteGTE applies the GTE predicate on the "prerequisite" field.
func PrerequisiteGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteLT applies the LT predicate on the "prerequisite" field.
func PrerequisiteLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteLTE applies the LTE predicate on the "prerequisite" field.
func PrerequisiteLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteContains applies the Contains predicate on the "prerequisite" field.
func PrerequisiteContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteHasPrefix applies the HasPrefix predicate on the "prerequisite" field.
func PrerequisiteHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteHasSuffix applies the HasSuffix predicate on the "prerequisite" field.
func PrerequisiteHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteIsNil applies the IsNil predicate on the "prerequisite" field.
func PrerequisiteIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrerequisite)))
	})
}

// PrerequisiteNotNil applies the NotNil predicate on the "prerequisite" field.
func PrerequisiteNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrerequisite)))
	})
}

// PrerequisiteEqualFold applies the EqualFold predicate on the "prerequisite" field.
func PrerequisiteEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrerequisite), v))
	})
}

// PrerequisiteContainsFold applies the ContainsFold predicate on the "prerequisite" field.
func PrerequisiteContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrerequisite), v))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// CostContains applies the Contains predicate on the "cost" field.
func CostContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCost), v))
	})
}

// CostHasPrefix applies the HasPrefix predicate on the "cost" field.
func CostHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCost), v))
	})
}

// CostHasSuffix applies the HasSuffix predicate on the "cost" field.
func CostHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCost), v))
	})
}

// CostIsNil applies the IsNil predicate on the "cost" field.
func CostIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCost)))
	})
}

// CostNotNil applies the NotNil predicate on the "cost" field.
func CostNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCost)))
	})
}

// CostEqualFold applies the EqualFold predicate on the "cost" field.
func CostEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCost), v))
	})
}

// CostContainsFold applies the ContainsFold predicate on the "cost" field.
func CostContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCost), v))
	})
}

// FunctionTextEQ applies the EQ predicate on the "function_text" field.
func FunctionTextEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionText), v))
	})
}

// FunctionTextNEQ applies the NEQ predicate on the "function_text" field.
func FunctionTextNEQ(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFunctionText), v))
	})
}

// FunctionTextIn applies the In predicate on the "function_text" field.
func FunctionTextIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFunctionText), v...))
	})
}

// FunctionTextNotIn applies the NotIn predicate on the "function_text" field.
func FunctionTextNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFunctionText), v...))
	})
}

// FunctionTextGT applies the GT predicate on the "function_text" field.
func FunctionTextGT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFunctionText), v))
	})
}

// FunctionTextGTE applies the GTE predicate on the "function_text" field.
func FunctionTextGTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFunctionText), v))
	})
}

// FunctionTextLT applies the LT predicate on the "function_text" field.
func FunctionTextLT(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFunctionText), v))
	})
}

// FunctionTextLTE applies the LTE predicate on the "function_text" field.
func FunctionTextLTE(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFunctionText), v))
	})
}

// FunctionTextContains applies the Contains predicate on the "function_text" field.
func FunctionTextContains(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFunctionText), v))
	})
}

// FunctionTextHasPrefix applies the HasPrefix predicate on the "function_text" field.
func FunctionTextHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFunctionText), v))
	})
}

// FunctionTextHasSuffix applies the HasSuffix predicate on the "function_text" field.
func FunctionTextHasSuffix(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFunctionText), v))
	})
}

// FunctionTextIsNil applies the IsNil predicate on the "function_text" field.
func FunctionTextIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFunctionText)))
	})
}

// FunctionTextNotNil applies the NotNil predicate on the "function_text" field.
func FunctionTextNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFunctionText)))
	})
}

// FunctionTextEqualFold applies the EqualFold predicate on the "function_text" field.
func FunctionTextEqualFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFunctionText), v))
	})
}

// FunctionTextContainsFold applies the ContainsFold predicate on the "function_text" field.
func FunctionTextContainsFold(v string) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFunctionText), v))
	})
}

// IsOfficialJaEQ applies the EQ predicate on the "is_official_ja" field.
func IsOfficialJaEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOfficialJa), v))
	})
}

// IsOfficialJaNEQ applies the NEQ predicate on the "is_official_ja" field.
func IsOfficialJaNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsOfficialJa), v))
	})
}

// VictoryPointEQ applies the EQ predicate on the "victory_point" field.
func VictoryPointEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointNEQ applies the NEQ predicate on the "victory_point" field.
func VictoryPointNEQ(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointIn applies the In predicate on the "victory_point" field.
func VictoryPointIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVictoryPoint), v...))
	})
}

// VictoryPointNotIn applies the NotIn predicate on the "victory_point" field.
func VictoryPointNotIn(vs ...int) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVictoryPoint), v...))
	})
}

// VictoryPointGT applies the GT predicate on the "victory_point" field.
func VictoryPointGT(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointGTE applies the GTE predicate on the "victory_point" field.
func VictoryPointGTE(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointLT applies the LT predicate on the "victory_point" field.
func VictoryPointLT(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointLTE applies the LTE predicate on the "victory_point" field.
func VictoryPointLTE(v int) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVictoryPoint), v))
	})
}

// VictoryPointIsNil applies the IsNil predicate on the "victory_point" field.
func VictoryPointIsNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVictoryPoint)))
	})
}

// VictoryPointNotNil applies the NotNil predicate on the "victory_point" field.
func VictoryPointNotNil() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVictoryPoint)))
	})
}

// IsVariableVictoryPointEQ applies the EQ predicate on the "is_variable_victory_point" field.
func IsVariableVictoryPointEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVariableVictoryPoint), v))
	})
}

// IsVariableVictoryPointNEQ applies the NEQ predicate on the "is_variable_victory_point" field.
func IsVariableVictoryPointNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVariableVictoryPoint), v))
	})
}

// HasArrrowEQ applies the EQ predicate on the "has_arrrow" field.
func HasArrrowEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasArrrow), v))
	})
}

// HasArrrowNEQ applies the NEQ predicate on the "has_arrrow" field.
func HasArrrowNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasArrrow), v))
	})
}

// HasBonusPointIconEQ applies the EQ predicate on the "has_bonus_point_icon" field.
func HasBonusPointIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBonusPointIcon), v))
	})
}

// HasBonusPointIconNEQ applies the NEQ predicate on the "has_bonus_point_icon" field.
func HasBonusPointIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasBonusPointIcon), v))
	})
}

// HasNegativeBonusPointIconEQ applies the EQ predicate on the "has_negative_bonus_point_icon" field.
func HasNegativeBonusPointIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasNegativeBonusPointIcon), v))
	})
}

// HasNegativeBonusPointIconNEQ applies the NEQ predicate on the "has_negative_bonus_point_icon" field.
func HasNegativeBonusPointIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasNegativeBonusPointIcon), v))
	})
}

// HasPanIconEQ applies the EQ predicate on the "has_pan_icon" field.
func HasPanIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPanIcon), v))
	})
}

// HasPanIconNEQ applies the NEQ predicate on the "has_pan_icon" field.
func HasPanIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasPanIcon), v))
	})
}

// HasBreadIconEQ applies the EQ predicate on the "has_bread_icon" field.
func HasBreadIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBreadIcon), v))
	})
}

// HasBreadIconNEQ applies the NEQ predicate on the "has_bread_icon" field.
func HasBreadIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasBreadIcon), v))
	})
}

// HasFarmPlannerIconEQ applies the EQ predicate on the "has_farm_planner_icon" field.
func HasFarmPlannerIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFarmPlannerIcon), v))
	})
}

// HasFarmPlannerIconNEQ applies the NEQ predicate on the "has_farm_planner_icon" field.
func HasFarmPlannerIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasFarmPlannerIcon), v))
	})
}

// HasActionsBoosterIconEQ applies the EQ predicate on the "has_actions_booster_icon" field.
func HasActionsBoosterIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasActionsBoosterIcon), v))
	})
}

// HasActionsBoosterIconNEQ applies the NEQ predicate on the "has_actions_booster_icon" field.
func HasActionsBoosterIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasActionsBoosterIcon), v))
	})
}

// HasPointsProviderIconEQ applies the EQ predicate on the "has_points_provider_icon" field.
func HasPointsProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPointsProviderIcon), v))
	})
}

// HasPointsProviderIconNEQ applies the NEQ predicate on the "has_points_provider_icon" field.
func HasPointsProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasPointsProviderIcon), v))
	})
}

// HasGoodsProviderIconEQ applies the EQ predicate on the "has_goods_provider_icon" field.
func HasGoodsProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasGoodsProviderIcon), v))
	})
}

// HasGoodsProviderIconNEQ applies the NEQ predicate on the "has_goods_provider_icon" field.
func HasGoodsProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasGoodsProviderIcon), v))
	})
}

// HasFoodProviderIconEQ applies the EQ predicate on the "has_food_provider_icon" field.
func HasFoodProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFoodProviderIcon), v))
	})
}

// HasFoodProviderIconNEQ applies the NEQ predicate on the "has_food_provider_icon" field.
func HasFoodProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasFoodProviderIcon), v))
	})
}

// HasCropProviderIconEQ applies the EQ predicate on the "has_crop_provider_icon" field.
func HasCropProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasCropProviderIcon), v))
	})
}

// HasCropProviderIconNEQ applies the NEQ predicate on the "has_crop_provider_icon" field.
func HasCropProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasCropProviderIcon), v))
	})
}

// HasBuildingResourceProviderIconEQ applies the EQ predicate on the "has_building_resource_provider_icon" field.
func HasBuildingResourceProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasBuildingResourceProviderIcon), v))
	})
}

// HasBuildingResourceProviderIconNEQ applies the NEQ predicate on the "has_building_resource_provider_icon" field.
func HasBuildingResourceProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasBuildingResourceProviderIcon), v))
	})
}

// HasLivestockProviderIconEQ applies the EQ predicate on the "has_livestock_provider_icon" field.
func HasLivestockProviderIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasLivestockProviderIcon), v))
	})
}

// HasLivestockProviderIconNEQ applies the NEQ predicate on the "has_livestock_provider_icon" field.
func HasLivestockProviderIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasLivestockProviderIcon), v))
	})
}

// HasCutPeatIconEQ applies the EQ predicate on the "has_cut_peat_icon" field.
func HasCutPeatIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasCutPeatIcon), v))
	})
}

// HasCutPeatIconNEQ applies the NEQ predicate on the "has_cut_peat_icon" field.
func HasCutPeatIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasCutPeatIcon), v))
	})
}

// HasFellTreesIconEQ applies the EQ predicate on the "has_fell_trees_icon" field.
func HasFellTreesIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasFellTreesIcon), v))
	})
}

// HasFellTreesIconNEQ applies the NEQ predicate on the "has_fell_trees_icon" field.
func HasFellTreesIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasFellTreesIcon), v))
	})
}

// HasSlashAndBurnIconEQ applies the EQ predicate on the "has_slash_and_burn_icon" field.
func HasSlashAndBurnIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasSlashAndBurnIcon), v))
	})
}

// HasSlashAndBurnIconNEQ applies the NEQ predicate on the "has_slash_and_burn_icon" field.
func HasSlashAndBurnIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasSlashAndBurnIcon), v))
	})
}

// HasHiringFareIconEQ applies the EQ predicate on the "has_hiring_fare_icon" field.
func HasHiringFareIconEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasHiringFareIcon), v))
	})
}

// HasHiringFareIconNEQ applies the NEQ predicate on the "has_hiring_fare_icon" field.
func HasHiringFareIconNEQ(v bool) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasHiringFareIcon), v))
	})
}

// HasRevision applies the HasEdge predicate on the "revision" edge.
func HasRevision() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RevisionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RevisionTable, RevisionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevisionWith applies the HasEdge predicate on the "revision" edge with a given conditions (other predicates).
func HasRevisionWith(preds ...predicate.Revision) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RevisionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RevisionTable, RevisionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProductsTable, ProductsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProductsTable, ProductsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeck applies the HasEdge predicate on the "deck" edge.
func HasDeck() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeckTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeckTable, DeckColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeckWith applies the HasEdge predicate on the "deck" edge with a given conditions (other predicates).
func HasDeckWith(preds ...predicate.Deck) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeckInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeckTable, DeckColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardType applies the HasEdge predicate on the "card_type" edge.
func HasCardType() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardTypeTable, CardTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardTypeWith applies the HasEdge predicate on the "card_type" edge with a given conditions (other predicates).
func HasCardTypeWith(preds ...predicate.CardType) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardTypeTable, CardTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardSpecialColor applies the HasEdge predicate on the "card_special_color" edge.
func HasCardSpecialColor() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardSpecialColorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardSpecialColorTable, CardSpecialColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardSpecialColorWith applies the HasEdge predicate on the "card_special_color" edge with a given conditions (other predicates).
func HasCardSpecialColorWith(preds ...predicate.CardSpecialColor) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardSpecialColorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardSpecialColorTable, CardSpecialColorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAncestors applies the HasEdge predicate on the "ancestors" edge.
func HasAncestors() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AncestorsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AncestorsTable, AncestorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAncestorsWith applies the HasEdge predicate on the "ancestors" edge with a given conditions (other predicates).
func HasAncestorsWith(preds ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AncestorsTable, AncestorsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		p(s.Not())
	})
}
