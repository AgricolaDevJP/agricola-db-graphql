// Code generated by ent, DO NOT EDIT.

package card

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLiteralID holds the string denoting the literal_id field in the database.
	FieldLiteralID = "literal_id"
	// FieldRevisionID holds the string denoting the revision_id field in the database.
	FieldRevisionID = "revision_id"
	// FieldPrintedID holds the string denoting the printed_id field in the database.
	FieldPrintedID = "printed_id"
	// FieldPlayAgricolaCardID holds the string denoting the play_agricola_card_id field in the database.
	FieldPlayAgricolaCardID = "play_agricola_card_id"
	// FieldDeckID holds the string denoting the deck_id field in the database.
	FieldDeckID = "deck_id"
	// FieldCardTypeID holds the string denoting the card_type_id field in the database.
	FieldCardTypeID = "card_type_id"
	// FieldCardSpecialColorID holds the string denoting the card_special_color_id field in the database.
	FieldCardSpecialColorID = "card_special_color_id"
	// FieldNameJa holds the string denoting the name_ja field in the database.
	FieldNameJa = "name_ja"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldMinPlayersNumber holds the string denoting the min_players_number field in the database.
	FieldMinPlayersNumber = "min_players_number"
	// FieldPrerequisite holds the string denoting the prerequisite field in the database.
	FieldPrerequisite = "prerequisite"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldIsOfficialJa holds the string denoting the is_official_ja field in the database.
	FieldIsOfficialJa = "is_official_ja"
	// FieldVictoryPoint holds the string denoting the victory_point field in the database.
	FieldVictoryPoint = "victory_point"
	// FieldSpecialVictoryPoint holds the string denoting the special_victory_point field in the database.
	FieldSpecialVictoryPoint = "special_victory_point"
	// FieldHasArrrow holds the string denoting the has_arrrow field in the database.
	FieldHasArrrow = "has_arrrow"
	// FieldHasBonusPointIcon holds the string denoting the has_bonus_point_icon field in the database.
	FieldHasBonusPointIcon = "has_bonus_point_icon"
	// FieldHasNegativeBonusPointIcon holds the string denoting the has_negative_bonus_point_icon field in the database.
	FieldHasNegativeBonusPointIcon = "has_negative_bonus_point_icon"
	// FieldHasPanIcon holds the string denoting the has_pan_icon field in the database.
	FieldHasPanIcon = "has_pan_icon"
	// FieldHasBreadIcon holds the string denoting the has_bread_icon field in the database.
	FieldHasBreadIcon = "has_bread_icon"
	// FieldHasFarmPlannerIcon holds the string denoting the has_farm_planner_icon field in the database.
	FieldHasFarmPlannerIcon = "has_farm_planner_icon"
	// FieldHasActionsBoosterIcon holds the string denoting the has_actions_booster_icon field in the database.
	FieldHasActionsBoosterIcon = "has_actions_booster_icon"
	// FieldHasPointsProviderIcon holds the string denoting the has_points_provider_icon field in the database.
	FieldHasPointsProviderIcon = "has_points_provider_icon"
	// FieldHasGoodsProviderIcon holds the string denoting the has_goods_provider_icon field in the database.
	FieldHasGoodsProviderIcon = "has_goods_provider_icon"
	// FieldHasFoodProviderIcon holds the string denoting the has_food_provider_icon field in the database.
	FieldHasFoodProviderIcon = "has_food_provider_icon"
	// FieldHasCropProviderIcon holds the string denoting the has_crop_provider_icon field in the database.
	FieldHasCropProviderIcon = "has_crop_provider_icon"
	// FieldHasBuildingResourceProviderIcon holds the string denoting the has_building_resource_provider_icon field in the database.
	FieldHasBuildingResourceProviderIcon = "has_building_resource_provider_icon"
	// FieldHasLivestockProviderIcon holds the string denoting the has_livestock_provider_icon field in the database.
	FieldHasLivestockProviderIcon = "has_livestock_provider_icon"
	// FieldHasCutPeatIcon holds the string denoting the has_cut_peat_icon field in the database.
	FieldHasCutPeatIcon = "has_cut_peat_icon"
	// FieldHasFellTreesIcon holds the string denoting the has_fell_trees_icon field in the database.
	FieldHasFellTreesIcon = "has_fell_trees_icon"
	// FieldHasSlashAndBurnIcon holds the string denoting the has_slash_and_burn_icon field in the database.
	FieldHasSlashAndBurnIcon = "has_slash_and_burn_icon"
	// FieldHasHiringFareIcon holds the string denoting the has_hiring_fare_icon field in the database.
	FieldHasHiringFareIcon = "has_hiring_fare_icon"
	// EdgeRevision holds the string denoting the revision edge name in mutations.
	EdgeRevision = "revision"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeDeck holds the string denoting the deck edge name in mutations.
	EdgeDeck = "deck"
	// EdgeCardType holds the string denoting the card_type edge name in mutations.
	EdgeCardType = "card_type"
	// EdgeCardSpecialColor holds the string denoting the card_special_color edge name in mutations.
	EdgeCardSpecialColor = "card_special_color"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeAncestors holds the string denoting the ancestors edge name in mutations.
	EdgeAncestors = "ancestors"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// RevisionTable is the table that holds the revision relation/edge.
	RevisionTable = "cards"
	// RevisionInverseTable is the table name for the Revision entity.
	// It exists in this package in order to avoid circular dependency with the "revision" package.
	RevisionInverseTable = "revisions"
	// RevisionColumn is the table column denoting the revision relation/edge.
	RevisionColumn = "revision_id"
	// ProductsTable is the table that holds the products relation/edge. The primary key declared below.
	ProductsTable = "product_cards"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// DeckTable is the table that holds the deck relation/edge.
	DeckTable = "cards"
	// DeckInverseTable is the table name for the Deck entity.
	// It exists in this package in order to avoid circular dependency with the "deck" package.
	DeckInverseTable = "decks"
	// DeckColumn is the table column denoting the deck relation/edge.
	DeckColumn = "deck_id"
	// CardTypeTable is the table that holds the card_type relation/edge.
	CardTypeTable = "cards"
	// CardTypeInverseTable is the table name for the CardType entity.
	// It exists in this package in order to avoid circular dependency with the "cardtype" package.
	CardTypeInverseTable = "card_types"
	// CardTypeColumn is the table column denoting the card_type relation/edge.
	CardTypeColumn = "card_type_id"
	// CardSpecialColorTable is the table that holds the card_special_color relation/edge.
	CardSpecialColorTable = "cards"
	// CardSpecialColorInverseTable is the table name for the CardSpecialColor entity.
	// It exists in this package in order to avoid circular dependency with the "cardspecialcolor" package.
	CardSpecialColorInverseTable = "card_special_colors"
	// CardSpecialColorColumn is the table column denoting the card_special_color relation/edge.
	CardSpecialColorColumn = "card_special_color_id"
	// ChildrenTable is the table that holds the children relation/edge. The primary key declared below.
	ChildrenTable = "card_ancestors"
	// AncestorsTable is the table that holds the ancestors relation/edge. The primary key declared below.
	AncestorsTable = "card_ancestors"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldLiteralID,
	FieldRevisionID,
	FieldPrintedID,
	FieldPlayAgricolaCardID,
	FieldDeckID,
	FieldCardTypeID,
	FieldCardSpecialColorID,
	FieldNameJa,
	FieldNameEn,
	FieldMinPlayersNumber,
	FieldPrerequisite,
	FieldCost,
	FieldDescription,
	FieldNote,
	FieldIsOfficialJa,
	FieldVictoryPoint,
	FieldSpecialVictoryPoint,
	FieldHasArrrow,
	FieldHasBonusPointIcon,
	FieldHasNegativeBonusPointIcon,
	FieldHasPanIcon,
	FieldHasBreadIcon,
	FieldHasFarmPlannerIcon,
	FieldHasActionsBoosterIcon,
	FieldHasPointsProviderIcon,
	FieldHasGoodsProviderIcon,
	FieldHasFoodProviderIcon,
	FieldHasCropProviderIcon,
	FieldHasBuildingResourceProviderIcon,
	FieldHasLivestockProviderIcon,
	FieldHasCutPeatIcon,
	FieldHasFellTreesIcon,
	FieldHasSlashAndBurnIcon,
	FieldHasHiringFareIcon,
}

var (
	// ProductsPrimaryKey and ProductsColumn2 are the table columns denoting the
	// primary key for the products relation (M2M).
	ProductsPrimaryKey = []string{"product_id", "card_id"}
	// ChildrenPrimaryKey and ChildrenColumn2 are the table columns denoting the
	// primary key for the children relation (M2M).
	ChildrenPrimaryKey = []string{"card_id", "child_id"}
	// AncestorsPrimaryKey and AncestorsColumn2 are the table columns denoting the
	// primary key for the ancestors relation (M2M).
	AncestorsPrimaryKey = []string{"card_id", "child_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LiteralIDValidator is a validator for the "literal_id" field. It is called by the builders before save.
	LiteralIDValidator func(string) error
)
