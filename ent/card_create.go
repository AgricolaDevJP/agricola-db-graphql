// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agricoladb/ent/card"
	"agricoladb/ent/cardspecialcolor"
	"agricoladb/ent/cardtype"
	"agricoladb/ent/deck"
	"agricoladb/ent/product"
	"agricoladb/ent/revision"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetLiteralID sets the "literal_id" field.
func (cc *CardCreate) SetLiteralID(s string) *CardCreate {
	cc.mutation.SetLiteralID(s)
	return cc
}

// SetRevisionID sets the "revision_id" field.
func (cc *CardCreate) SetRevisionID(i int) *CardCreate {
	cc.mutation.SetRevisionID(i)
	return cc
}

// SetPrintedID sets the "printed_id" field.
func (cc *CardCreate) SetPrintedID(s string) *CardCreate {
	cc.mutation.SetPrintedID(s)
	return cc
}

// SetNillablePrintedID sets the "printed_id" field if the given value is not nil.
func (cc *CardCreate) SetNillablePrintedID(s *string) *CardCreate {
	if s != nil {
		cc.SetPrintedID(*s)
	}
	return cc
}

// SetPlayAgricolaCardID sets the "play_agricola_card_id" field.
func (cc *CardCreate) SetPlayAgricolaCardID(s string) *CardCreate {
	cc.mutation.SetPlayAgricolaCardID(s)
	return cc
}

// SetNillablePlayAgricolaCardID sets the "play_agricola_card_id" field if the given value is not nil.
func (cc *CardCreate) SetNillablePlayAgricolaCardID(s *string) *CardCreate {
	if s != nil {
		cc.SetPlayAgricolaCardID(*s)
	}
	return cc
}

// SetDeckID sets the "deck_id" field.
func (cc *CardCreate) SetDeckID(i int) *CardCreate {
	cc.mutation.SetDeckID(i)
	return cc
}

// SetNillableDeckID sets the "deck_id" field if the given value is not nil.
func (cc *CardCreate) SetNillableDeckID(i *int) *CardCreate {
	if i != nil {
		cc.SetDeckID(*i)
	}
	return cc
}

// SetCardTypeID sets the "card_type_id" field.
func (cc *CardCreate) SetCardTypeID(i int) *CardCreate {
	cc.mutation.SetCardTypeID(i)
	return cc
}

// SetCardSpecialColorID sets the "card_special_color_id" field.
func (cc *CardCreate) SetCardSpecialColorID(i int) *CardCreate {
	cc.mutation.SetCardSpecialColorID(i)
	return cc
}

// SetNillableCardSpecialColorID sets the "card_special_color_id" field if the given value is not nil.
func (cc *CardCreate) SetNillableCardSpecialColorID(i *int) *CardCreate {
	if i != nil {
		cc.SetCardSpecialColorID(*i)
	}
	return cc
}

// SetNameJa sets the "name_ja" field.
func (cc *CardCreate) SetNameJa(s string) *CardCreate {
	cc.mutation.SetNameJa(s)
	return cc
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (cc *CardCreate) SetNillableNameJa(s *string) *CardCreate {
	if s != nil {
		cc.SetNameJa(*s)
	}
	return cc
}

// SetNameEn sets the "name_en" field.
func (cc *CardCreate) SetNameEn(s string) *CardCreate {
	cc.mutation.SetNameEn(s)
	return cc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (cc *CardCreate) SetNillableNameEn(s *string) *CardCreate {
	if s != nil {
		cc.SetNameEn(*s)
	}
	return cc
}

// SetMinPlayersNumber sets the "min_players_number" field.
func (cc *CardCreate) SetMinPlayersNumber(i int) *CardCreate {
	cc.mutation.SetMinPlayersNumber(i)
	return cc
}

// SetNillableMinPlayersNumber sets the "min_players_number" field if the given value is not nil.
func (cc *CardCreate) SetNillableMinPlayersNumber(i *int) *CardCreate {
	if i != nil {
		cc.SetMinPlayersNumber(*i)
	}
	return cc
}

// SetPrerequisite sets the "prerequisite" field.
func (cc *CardCreate) SetPrerequisite(s string) *CardCreate {
	cc.mutation.SetPrerequisite(s)
	return cc
}

// SetNillablePrerequisite sets the "prerequisite" field if the given value is not nil.
func (cc *CardCreate) SetNillablePrerequisite(s *string) *CardCreate {
	if s != nil {
		cc.SetPrerequisite(*s)
	}
	return cc
}

// SetCost sets the "cost" field.
func (cc *CardCreate) SetCost(s string) *CardCreate {
	cc.mutation.SetCost(s)
	return cc
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (cc *CardCreate) SetNillableCost(s *string) *CardCreate {
	if s != nil {
		cc.SetCost(*s)
	}
	return cc
}

// SetFunctionText sets the "function_text" field.
func (cc *CardCreate) SetFunctionText(s string) *CardCreate {
	cc.mutation.SetFunctionText(s)
	return cc
}

// SetNillableFunctionText sets the "function_text" field if the given value is not nil.
func (cc *CardCreate) SetNillableFunctionText(s *string) *CardCreate {
	if s != nil {
		cc.SetFunctionText(*s)
	}
	return cc
}

// SetIsOfficialJa sets the "is_official_ja" field.
func (cc *CardCreate) SetIsOfficialJa(b bool) *CardCreate {
	cc.mutation.SetIsOfficialJa(b)
	return cc
}

// SetVictoryPoint sets the "victory_point" field.
func (cc *CardCreate) SetVictoryPoint(i int) *CardCreate {
	cc.mutation.SetVictoryPoint(i)
	return cc
}

// SetNillableVictoryPoint sets the "victory_point" field if the given value is not nil.
func (cc *CardCreate) SetNillableVictoryPoint(i *int) *CardCreate {
	if i != nil {
		cc.SetVictoryPoint(*i)
	}
	return cc
}

// SetIsVariableVictoryPoint sets the "is_variable_victory_point" field.
func (cc *CardCreate) SetIsVariableVictoryPoint(b bool) *CardCreate {
	cc.mutation.SetIsVariableVictoryPoint(b)
	return cc
}

// SetHasArrrow sets the "has_arrrow" field.
func (cc *CardCreate) SetHasArrrow(b bool) *CardCreate {
	cc.mutation.SetHasArrrow(b)
	return cc
}

// SetHasBonusPointIcon sets the "has_bonus_point_icon" field.
func (cc *CardCreate) SetHasBonusPointIcon(b bool) *CardCreate {
	cc.mutation.SetHasBonusPointIcon(b)
	return cc
}

// SetHasNegativeBonusPointIcon sets the "has_negative_bonus_point_icon" field.
func (cc *CardCreate) SetHasNegativeBonusPointIcon(b bool) *CardCreate {
	cc.mutation.SetHasNegativeBonusPointIcon(b)
	return cc
}

// SetHasPanIcon sets the "has_pan_icon" field.
func (cc *CardCreate) SetHasPanIcon(b bool) *CardCreate {
	cc.mutation.SetHasPanIcon(b)
	return cc
}

// SetHasBreadIcon sets the "has_bread_icon" field.
func (cc *CardCreate) SetHasBreadIcon(b bool) *CardCreate {
	cc.mutation.SetHasBreadIcon(b)
	return cc
}

// SetHasFarmPlannerIcon sets the "has_farm_planner_icon" field.
func (cc *CardCreate) SetHasFarmPlannerIcon(b bool) *CardCreate {
	cc.mutation.SetHasFarmPlannerIcon(b)
	return cc
}

// SetHasActionsBoosterIcon sets the "has_actions_booster_icon" field.
func (cc *CardCreate) SetHasActionsBoosterIcon(b bool) *CardCreate {
	cc.mutation.SetHasActionsBoosterIcon(b)
	return cc
}

// SetHasPointsProviderIcon sets the "has_points_provider_icon" field.
func (cc *CardCreate) SetHasPointsProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasPointsProviderIcon(b)
	return cc
}

// SetHasGoodsProviderIcon sets the "has_goods_provider_icon" field.
func (cc *CardCreate) SetHasGoodsProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasGoodsProviderIcon(b)
	return cc
}

// SetHasFoodProviderIcon sets the "has_food_provider_icon" field.
func (cc *CardCreate) SetHasFoodProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasFoodProviderIcon(b)
	return cc
}

// SetHasCropProviderIcon sets the "has_crop_provider_icon" field.
func (cc *CardCreate) SetHasCropProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasCropProviderIcon(b)
	return cc
}

// SetHasBuildingResourceProviderIcon sets the "has_building_resource_provider_icon" field.
func (cc *CardCreate) SetHasBuildingResourceProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasBuildingResourceProviderIcon(b)
	return cc
}

// SetHasLivestockProviderIcon sets the "has_livestock_provider_icon" field.
func (cc *CardCreate) SetHasLivestockProviderIcon(b bool) *CardCreate {
	cc.mutation.SetHasLivestockProviderIcon(b)
	return cc
}

// SetHasCutPeatIcon sets the "has_cut_peat_icon" field.
func (cc *CardCreate) SetHasCutPeatIcon(b bool) *CardCreate {
	cc.mutation.SetHasCutPeatIcon(b)
	return cc
}

// SetHasFellTreesIcon sets the "has_fell_trees_icon" field.
func (cc *CardCreate) SetHasFellTreesIcon(b bool) *CardCreate {
	cc.mutation.SetHasFellTreesIcon(b)
	return cc
}

// SetHasSlashAndBurnIcon sets the "has_slash_and_burn_icon" field.
func (cc *CardCreate) SetHasSlashAndBurnIcon(b bool) *CardCreate {
	cc.mutation.SetHasSlashAndBurnIcon(b)
	return cc
}

// SetHasHiringFareIcon sets the "has_hiring_fare_icon" field.
func (cc *CardCreate) SetHasHiringFareIcon(b bool) *CardCreate {
	cc.mutation.SetHasHiringFareIcon(b)
	return cc
}

// SetRevision sets the "revision" edge to the Revision entity.
func (cc *CardCreate) SetRevision(r *Revision) *CardCreate {
	return cc.SetRevisionID(r.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cc *CardCreate) AddProductIDs(ids ...int) *CardCreate {
	cc.mutation.AddProductIDs(ids...)
	return cc
}

// AddProducts adds the "products" edges to the Product entity.
func (cc *CardCreate) AddProducts(p ...*Product) *CardCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProductIDs(ids...)
}

// SetDeck sets the "deck" edge to the Deck entity.
func (cc *CardCreate) SetDeck(d *Deck) *CardCreate {
	return cc.SetDeckID(d.ID)
}

// SetCardType sets the "card_type" edge to the CardType entity.
func (cc *CardCreate) SetCardType(c *CardType) *CardCreate {
	return cc.SetCardTypeID(c.ID)
}

// SetCardSpecialColor sets the "card_special_color" edge to the CardSpecialColor entity.
func (cc *CardCreate) SetCardSpecialColor(c *CardSpecialColor) *CardCreate {
	return cc.SetCardSpecialColorID(c.ID)
}

// AddChildIDs adds the "children" edge to the Card entity by IDs.
func (cc *CardCreate) AddChildIDs(ids ...int) *CardCreate {
	cc.mutation.AddChildIDs(ids...)
	return cc
}

// AddChildren adds the "children" edges to the Card entity.
func (cc *CardCreate) AddChildren(c ...*Card) *CardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChildIDs(ids...)
}

// AddAncestorIDs adds the "ancestors" edge to the Card entity by IDs.
func (cc *CardCreate) AddAncestorIDs(ids ...int) *CardCreate {
	cc.mutation.AddAncestorIDs(ids...)
	return cc
}

// AddAncestors adds the "ancestors" edges to the Card entity.
func (cc *CardCreate) AddAncestors(c ...*Card) *CardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddAncestorIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.LiteralID(); !ok {
		return &ValidationError{Name: "literal_id", err: errors.New(`ent: missing required field "Card.literal_id"`)}
	}
	if v, ok := cc.mutation.LiteralID(); ok {
		if err := card.LiteralIDValidator(v); err != nil {
			return &ValidationError{Name: "literal_id", err: fmt.Errorf(`ent: validator failed for field "Card.literal_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RevisionID(); !ok {
		return &ValidationError{Name: "revision_id", err: errors.New(`ent: missing required field "Card.revision_id"`)}
	}
	if _, ok := cc.mutation.CardTypeID(); !ok {
		return &ValidationError{Name: "card_type_id", err: errors.New(`ent: missing required field "Card.card_type_id"`)}
	}
	if _, ok := cc.mutation.IsOfficialJa(); !ok {
		return &ValidationError{Name: "is_official_ja", err: errors.New(`ent: missing required field "Card.is_official_ja"`)}
	}
	if _, ok := cc.mutation.IsVariableVictoryPoint(); !ok {
		return &ValidationError{Name: "is_variable_victory_point", err: errors.New(`ent: missing required field "Card.is_variable_victory_point"`)}
	}
	if _, ok := cc.mutation.HasArrrow(); !ok {
		return &ValidationError{Name: "has_arrrow", err: errors.New(`ent: missing required field "Card.has_arrrow"`)}
	}
	if _, ok := cc.mutation.HasBonusPointIcon(); !ok {
		return &ValidationError{Name: "has_bonus_point_icon", err: errors.New(`ent: missing required field "Card.has_bonus_point_icon"`)}
	}
	if _, ok := cc.mutation.HasNegativeBonusPointIcon(); !ok {
		return &ValidationError{Name: "has_negative_bonus_point_icon", err: errors.New(`ent: missing required field "Card.has_negative_bonus_point_icon"`)}
	}
	if _, ok := cc.mutation.HasPanIcon(); !ok {
		return &ValidationError{Name: "has_pan_icon", err: errors.New(`ent: missing required field "Card.has_pan_icon"`)}
	}
	if _, ok := cc.mutation.HasBreadIcon(); !ok {
		return &ValidationError{Name: "has_bread_icon", err: errors.New(`ent: missing required field "Card.has_bread_icon"`)}
	}
	if _, ok := cc.mutation.HasFarmPlannerIcon(); !ok {
		return &ValidationError{Name: "has_farm_planner_icon", err: errors.New(`ent: missing required field "Card.has_farm_planner_icon"`)}
	}
	if _, ok := cc.mutation.HasActionsBoosterIcon(); !ok {
		return &ValidationError{Name: "has_actions_booster_icon", err: errors.New(`ent: missing required field "Card.has_actions_booster_icon"`)}
	}
	if _, ok := cc.mutation.HasPointsProviderIcon(); !ok {
		return &ValidationError{Name: "has_points_provider_icon", err: errors.New(`ent: missing required field "Card.has_points_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasGoodsProviderIcon(); !ok {
		return &ValidationError{Name: "has_goods_provider_icon", err: errors.New(`ent: missing required field "Card.has_goods_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasFoodProviderIcon(); !ok {
		return &ValidationError{Name: "has_food_provider_icon", err: errors.New(`ent: missing required field "Card.has_food_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasCropProviderIcon(); !ok {
		return &ValidationError{Name: "has_crop_provider_icon", err: errors.New(`ent: missing required field "Card.has_crop_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasBuildingResourceProviderIcon(); !ok {
		return &ValidationError{Name: "has_building_resource_provider_icon", err: errors.New(`ent: missing required field "Card.has_building_resource_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasLivestockProviderIcon(); !ok {
		return &ValidationError{Name: "has_livestock_provider_icon", err: errors.New(`ent: missing required field "Card.has_livestock_provider_icon"`)}
	}
	if _, ok := cc.mutation.HasCutPeatIcon(); !ok {
		return &ValidationError{Name: "has_cut_peat_icon", err: errors.New(`ent: missing required field "Card.has_cut_peat_icon"`)}
	}
	if _, ok := cc.mutation.HasFellTreesIcon(); !ok {
		return &ValidationError{Name: "has_fell_trees_icon", err: errors.New(`ent: missing required field "Card.has_fell_trees_icon"`)}
	}
	if _, ok := cc.mutation.HasSlashAndBurnIcon(); !ok {
		return &ValidationError{Name: "has_slash_and_burn_icon", err: errors.New(`ent: missing required field "Card.has_slash_and_burn_icon"`)}
	}
	if _, ok := cc.mutation.HasHiringFareIcon(); !ok {
		return &ValidationError{Name: "has_hiring_fare_icon", err: errors.New(`ent: missing required field "Card.has_hiring_fare_icon"`)}
	}
	if _, ok := cc.mutation.RevisionID(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required edge "Card.revision"`)}
	}
	if _, ok := cc.mutation.CardTypeID(); !ok {
		return &ValidationError{Name: "card_type", err: errors.New(`ent: missing required edge "Card.card_type"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.LiteralID(); ok {
		_spec.SetField(card.FieldLiteralID, field.TypeString, value)
		_node.LiteralID = value
	}
	if value, ok := cc.mutation.PrintedID(); ok {
		_spec.SetField(card.FieldPrintedID, field.TypeString, value)
		_node.PrintedID = value
	}
	if value, ok := cc.mutation.PlayAgricolaCardID(); ok {
		_spec.SetField(card.FieldPlayAgricolaCardID, field.TypeString, value)
		_node.PlayAgricolaCardID = value
	}
	if value, ok := cc.mutation.NameJa(); ok {
		_spec.SetField(card.FieldNameJa, field.TypeString, value)
		_node.NameJa = value
	}
	if value, ok := cc.mutation.NameEn(); ok {
		_spec.SetField(card.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := cc.mutation.MinPlayersNumber(); ok {
		_spec.SetField(card.FieldMinPlayersNumber, field.TypeInt, value)
		_node.MinPlayersNumber = value
	}
	if value, ok := cc.mutation.Prerequisite(); ok {
		_spec.SetField(card.FieldPrerequisite, field.TypeString, value)
		_node.Prerequisite = value
	}
	if value, ok := cc.mutation.Cost(); ok {
		_spec.SetField(card.FieldCost, field.TypeString, value)
		_node.Cost = value
	}
	if value, ok := cc.mutation.FunctionText(); ok {
		_spec.SetField(card.FieldFunctionText, field.TypeString, value)
		_node.FunctionText = value
	}
	if value, ok := cc.mutation.IsOfficialJa(); ok {
		_spec.SetField(card.FieldIsOfficialJa, field.TypeBool, value)
		_node.IsOfficialJa = value
	}
	if value, ok := cc.mutation.VictoryPoint(); ok {
		_spec.SetField(card.FieldVictoryPoint, field.TypeInt, value)
		_node.VictoryPoint = value
	}
	if value, ok := cc.mutation.IsVariableVictoryPoint(); ok {
		_spec.SetField(card.FieldIsVariableVictoryPoint, field.TypeBool, value)
		_node.IsVariableVictoryPoint = value
	}
	if value, ok := cc.mutation.HasArrrow(); ok {
		_spec.SetField(card.FieldHasArrrow, field.TypeBool, value)
		_node.HasArrrow = value
	}
	if value, ok := cc.mutation.HasBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasBonusPointIcon, field.TypeBool, value)
		_node.HasBonusPointIcon = value
	}
	if value, ok := cc.mutation.HasNegativeBonusPointIcon(); ok {
		_spec.SetField(card.FieldHasNegativeBonusPointIcon, field.TypeBool, value)
		_node.HasNegativeBonusPointIcon = value
	}
	if value, ok := cc.mutation.HasPanIcon(); ok {
		_spec.SetField(card.FieldHasPanIcon, field.TypeBool, value)
		_node.HasPanIcon = value
	}
	if value, ok := cc.mutation.HasBreadIcon(); ok {
		_spec.SetField(card.FieldHasBreadIcon, field.TypeBool, value)
		_node.HasBreadIcon = value
	}
	if value, ok := cc.mutation.HasFarmPlannerIcon(); ok {
		_spec.SetField(card.FieldHasFarmPlannerIcon, field.TypeBool, value)
		_node.HasFarmPlannerIcon = value
	}
	if value, ok := cc.mutation.HasActionsBoosterIcon(); ok {
		_spec.SetField(card.FieldHasActionsBoosterIcon, field.TypeBool, value)
		_node.HasActionsBoosterIcon = value
	}
	if value, ok := cc.mutation.HasPointsProviderIcon(); ok {
		_spec.SetField(card.FieldHasPointsProviderIcon, field.TypeBool, value)
		_node.HasPointsProviderIcon = value
	}
	if value, ok := cc.mutation.HasGoodsProviderIcon(); ok {
		_spec.SetField(card.FieldHasGoodsProviderIcon, field.TypeBool, value)
		_node.HasGoodsProviderIcon = value
	}
	if value, ok := cc.mutation.HasFoodProviderIcon(); ok {
		_spec.SetField(card.FieldHasFoodProviderIcon, field.TypeBool, value)
		_node.HasFoodProviderIcon = value
	}
	if value, ok := cc.mutation.HasCropProviderIcon(); ok {
		_spec.SetField(card.FieldHasCropProviderIcon, field.TypeBool, value)
		_node.HasCropProviderIcon = value
	}
	if value, ok := cc.mutation.HasBuildingResourceProviderIcon(); ok {
		_spec.SetField(card.FieldHasBuildingResourceProviderIcon, field.TypeBool, value)
		_node.HasBuildingResourceProviderIcon = value
	}
	if value, ok := cc.mutation.HasLivestockProviderIcon(); ok {
		_spec.SetField(card.FieldHasLivestockProviderIcon, field.TypeBool, value)
		_node.HasLivestockProviderIcon = value
	}
	if value, ok := cc.mutation.HasCutPeatIcon(); ok {
		_spec.SetField(card.FieldHasCutPeatIcon, field.TypeBool, value)
		_node.HasCutPeatIcon = value
	}
	if value, ok := cc.mutation.HasFellTreesIcon(); ok {
		_spec.SetField(card.FieldHasFellTreesIcon, field.TypeBool, value)
		_node.HasFellTreesIcon = value
	}
	if value, ok := cc.mutation.HasSlashAndBurnIcon(); ok {
		_spec.SetField(card.FieldHasSlashAndBurnIcon, field.TypeBool, value)
		_node.HasSlashAndBurnIcon = value
	}
	if value, ok := cc.mutation.HasHiringFareIcon(); ok {
		_spec.SetField(card.FieldHasHiringFareIcon, field.TypeBool, value)
		_node.HasHiringFareIcon = value
	}
	if nodes := cc.mutation.RevisionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.RevisionTable,
			Columns: []string{card.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RevisionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ProductsTable,
			Columns: card.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckTable,
			Columns: []string{card.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeckID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CardTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardTypeTable,
			Columns: []string{card.CardTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CardTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CardSpecialColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.CardSpecialColorTable,
			Columns: []string{card.CardSpecialColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardspecialcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CardSpecialColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ChildrenTable,
			Columns: card.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AncestorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.AncestorsTable,
			Columns: card.AncestorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
