// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AgricolaDevJP/agricoladb-server/ent/card"
	"github.com/AgricolaDevJP/agricoladb-server/ent/predicate"
	"github.com/AgricolaDevJP/agricoladb-server/ent/product"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetIsOfficialJa sets the "is_official_ja" field.
func (pu *ProductUpdate) SetIsOfficialJa(b bool) *ProductUpdate {
	pu.mutation.SetIsOfficialJa(b)
	return pu
}

// SetNameJa sets the "name_ja" field.
func (pu *ProductUpdate) SetNameJa(s string) *ProductUpdate {
	pu.mutation.SetNameJa(s)
	return pu
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableNameJa(s *string) *ProductUpdate {
	if s != nil {
		pu.SetNameJa(*s)
	}
	return pu
}

// ClearNameJa clears the value of the "name_ja" field.
func (pu *ProductUpdate) ClearNameJa() *ProductUpdate {
	pu.mutation.ClearNameJa()
	return pu
}

// SetNameEn sets the "name_en" field.
func (pu *ProductUpdate) SetNameEn(s string) *ProductUpdate {
	pu.mutation.SetNameEn(s)
	return pu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableNameEn(s *string) *ProductUpdate {
	if s != nil {
		pu.SetNameEn(*s)
	}
	return pu
}

// ClearNameEn clears the value of the "name_en" field.
func (pu *ProductUpdate) ClearNameEn() *ProductUpdate {
	pu.mutation.ClearNameEn()
	return pu
}

// SetPublishedYear sets the "published_year" field.
func (pu *ProductUpdate) SetPublishedYear(i int) *ProductUpdate {
	pu.mutation.ResetPublishedYear()
	pu.mutation.SetPublishedYear(i)
	return pu
}

// SetNillablePublishedYear sets the "published_year" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePublishedYear(i *int) *ProductUpdate {
	if i != nil {
		pu.SetPublishedYear(*i)
	}
	return pu
}

// AddPublishedYear adds i to the "published_year" field.
func (pu *ProductUpdate) AddPublishedYear(i int) *ProductUpdate {
	pu.mutation.AddPublishedYear(i)
	return pu
}

// ClearPublishedYear clears the value of the "published_year" field.
func (pu *ProductUpdate) ClearPublishedYear() *ProductUpdate {
	pu.mutation.ClearPublishedYear()
	return pu
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (pu *ProductUpdate) AddCardIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCardIDs(ids...)
	return pu
}

// AddCards adds the "cards" edges to the Card entity.
func (pu *ProductUpdate) AddCards(c ...*Card) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCardIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (pu *ProductUpdate) ClearCards() *ProductUpdate {
	pu.mutation.ClearCards()
	return pu
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (pu *ProductUpdate) RemoveCardIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCardIDs(ids...)
	return pu
}

// RemoveCards removes "cards" edges to Card entities.
func (pu *ProductUpdate) RemoveCards(c ...*Card) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProductMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if _, ok := pu.mutation.RevisionID(); pu.mutation.RevisionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.revision"`)
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.IsOfficialJa(); ok {
		_spec.SetField(product.FieldIsOfficialJa, field.TypeBool, value)
	}
	if value, ok := pu.mutation.NameJa(); ok {
		_spec.SetField(product.FieldNameJa, field.TypeString, value)
	}
	if pu.mutation.NameJaCleared() {
		_spec.ClearField(product.FieldNameJa, field.TypeString)
	}
	if value, ok := pu.mutation.NameEn(); ok {
		_spec.SetField(product.FieldNameEn, field.TypeString, value)
	}
	if pu.mutation.NameEnCleared() {
		_spec.ClearField(product.FieldNameEn, field.TypeString)
	}
	if value, ok := pu.mutation.PublishedYear(); ok {
		_spec.SetField(product.FieldPublishedYear, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPublishedYear(); ok {
		_spec.AddField(product.FieldPublishedYear, field.TypeInt, value)
	}
	if pu.mutation.PublishedYearCleared() {
		_spec.ClearField(product.FieldPublishedYear, field.TypeInt)
	}
	if pu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCardsIDs(); len(nodes) > 0 && !pu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetIsOfficialJa sets the "is_official_ja" field.
func (puo *ProductUpdateOne) SetIsOfficialJa(b bool) *ProductUpdateOne {
	puo.mutation.SetIsOfficialJa(b)
	return puo
}

// SetNameJa sets the "name_ja" field.
func (puo *ProductUpdateOne) SetNameJa(s string) *ProductUpdateOne {
	puo.mutation.SetNameJa(s)
	return puo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableNameJa(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetNameJa(*s)
	}
	return puo
}

// ClearNameJa clears the value of the "name_ja" field.
func (puo *ProductUpdateOne) ClearNameJa() *ProductUpdateOne {
	puo.mutation.ClearNameJa()
	return puo
}

// SetNameEn sets the "name_en" field.
func (puo *ProductUpdateOne) SetNameEn(s string) *ProductUpdateOne {
	puo.mutation.SetNameEn(s)
	return puo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableNameEn(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetNameEn(*s)
	}
	return puo
}

// ClearNameEn clears the value of the "name_en" field.
func (puo *ProductUpdateOne) ClearNameEn() *ProductUpdateOne {
	puo.mutation.ClearNameEn()
	return puo
}

// SetPublishedYear sets the "published_year" field.
func (puo *ProductUpdateOne) SetPublishedYear(i int) *ProductUpdateOne {
	puo.mutation.ResetPublishedYear()
	puo.mutation.SetPublishedYear(i)
	return puo
}

// SetNillablePublishedYear sets the "published_year" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePublishedYear(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetPublishedYear(*i)
	}
	return puo
}

// AddPublishedYear adds i to the "published_year" field.
func (puo *ProductUpdateOne) AddPublishedYear(i int) *ProductUpdateOne {
	puo.mutation.AddPublishedYear(i)
	return puo
}

// ClearPublishedYear clears the value of the "published_year" field.
func (puo *ProductUpdateOne) ClearPublishedYear() *ProductUpdateOne {
	puo.mutation.ClearPublishedYear()
	return puo
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (puo *ProductUpdateOne) AddCardIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCardIDs(ids...)
	return puo
}

// AddCards adds the "cards" edges to the Card entity.
func (puo *ProductUpdateOne) AddCards(c ...*Card) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCardIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (puo *ProductUpdateOne) ClearCards() *ProductUpdateOne {
	puo.mutation.ClearCards()
	return puo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (puo *ProductUpdateOne) RemoveCardIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCardIDs(ids...)
	return puo
}

// RemoveCards removes "cards" edges to Card entities.
func (puo *ProductUpdateOne) RemoveCards(c ...*Card) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCardIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks[*Product, ProductMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if _, ok := puo.mutation.RevisionID(); puo.mutation.RevisionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.revision"`)
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.IsOfficialJa(); ok {
		_spec.SetField(product.FieldIsOfficialJa, field.TypeBool, value)
	}
	if value, ok := puo.mutation.NameJa(); ok {
		_spec.SetField(product.FieldNameJa, field.TypeString, value)
	}
	if puo.mutation.NameJaCleared() {
		_spec.ClearField(product.FieldNameJa, field.TypeString)
	}
	if value, ok := puo.mutation.NameEn(); ok {
		_spec.SetField(product.FieldNameEn, field.TypeString, value)
	}
	if puo.mutation.NameEnCleared() {
		_spec.ClearField(product.FieldNameEn, field.TypeString)
	}
	if value, ok := puo.mutation.PublishedYear(); ok {
		_spec.SetField(product.FieldPublishedYear, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPublishedYear(); ok {
		_spec.AddField(product.FieldPublishedYear, field.TypeInt, value)
	}
	if puo.mutation.PublishedYearCleared() {
		_spec.ClearField(product.FieldPublishedYear, field.TypeInt)
	}
	if puo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !puo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.CardsTable,
			Columns: product.CardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
