package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"agricoladb/ent"
	"agricoladb/graph/generated"
	"context"
	"fmt"
)

// MinPlayersNumber is the resolver for the minPlayersNumber field.
func (r *cardResolver) MinPlayersNumber(ctx context.Context, obj *ent.Card) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: MinPlayersNumber - minPlayersNumber"))
}

// VictoryPoint is the resolver for the victoryPoint field.
func (r *cardResolver) VictoryPoint(ctx context.Context, obj *ent.Card) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: VictoryPoint - victoryPoint"))
}

// TotalCount is the resolver for the totalCount field.
func (r *cardConnectionResolver) TotalCount(ctx context.Context, obj *ent.CardConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// TotalCount is the resolver for the totalCount field.
func (r *cardSpecialColorConnectionResolver) TotalCount(ctx context.Context, obj *ent.CardSpecialColorConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// TotalCount is the resolver for the totalCount field.
func (r *cardTypeConnectionResolver) TotalCount(ctx context.Context, obj *ent.CardTypeConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// TotalCount is the resolver for the totalCount field.
func (r *deckConnectionResolver) TotalCount(ctx context.Context, obj *ent.DeckConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// TotalCount is the resolver for the totalCount field.
func (r *productConnectionResolver) TotalCount(ctx context.Context, obj *ent.ProductConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.CardWhereInput) (*ent.CardConnection, error) {
	panic(fmt.Errorf("not implemented: Cards - cards"))
}

// CardSpecialColors is the resolver for the cardSpecialColors field.
func (r *queryResolver) CardSpecialColors(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.CardSpecialColorWhereInput) (*ent.CardSpecialColorConnection, error) {
	panic(fmt.Errorf("not implemented: CardSpecialColors - cardSpecialColors"))
}

// CardTypes is the resolver for the cardTypes field.
func (r *queryResolver) CardTypes(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.CardTypeWhereInput) (*ent.CardTypeConnection, error) {
	panic(fmt.Errorf("not implemented: CardTypes - cardTypes"))
}

// Decks is the resolver for the decks field.
func (r *queryResolver) Decks(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.DeckWhereInput) (*ent.DeckConnection, error) {
	panic(fmt.Errorf("not implemented: Decks - decks"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.ProductWhereInput) (*ent.ProductConnection, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Revisions is the resolver for the revisions field.
func (r *queryResolver) Revisions(ctx context.Context, after *ent.Cursor, first ent.Noder, before *ent.Cursor, last ent.Noder, where *ent.RevisionWhereInput) (*ent.RevisionConnection, error) {
	panic(fmt.Errorf("not implemented: Revisions - revisions"))
}

// TotalCount is the resolver for the totalCount field.
func (r *revisionConnectionResolver) TotalCount(ctx context.Context, obj *ent.RevisionConnection) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// MinPlayersNumber is the resolver for the minPlayersNumber field.
func (r *cardWhereInputResolver) MinPlayersNumber(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumber - minPlayersNumber"))
}

// MinPlayersNumberNeq is the resolver for the minPlayersNumberNEQ field.
func (r *cardWhereInputResolver) MinPlayersNumberNeq(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberNeq - minPlayersNumberNEQ"))
}

// MinPlayersNumberIn is the resolver for the minPlayersNumberIn field.
func (r *cardWhereInputResolver) MinPlayersNumberIn(ctx context.Context, obj *ent.CardWhereInput, data []ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberIn - minPlayersNumberIn"))
}

// MinPlayersNumberNotIn is the resolver for the minPlayersNumberNotIn field.
func (r *cardWhereInputResolver) MinPlayersNumberNotIn(ctx context.Context, obj *ent.CardWhereInput, data []ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberNotIn - minPlayersNumberNotIn"))
}

// MinPlayersNumberGt is the resolver for the minPlayersNumberGT field.
func (r *cardWhereInputResolver) MinPlayersNumberGt(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberGt - minPlayersNumberGT"))
}

// MinPlayersNumberGte is the resolver for the minPlayersNumberGTE field.
func (r *cardWhereInputResolver) MinPlayersNumberGte(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberGte - minPlayersNumberGTE"))
}

// MinPlayersNumberLt is the resolver for the minPlayersNumberLT field.
func (r *cardWhereInputResolver) MinPlayersNumberLt(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberLt - minPlayersNumberLT"))
}

// MinPlayersNumberLte is the resolver for the minPlayersNumberLTE field.
func (r *cardWhereInputResolver) MinPlayersNumberLte(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: MinPlayersNumberLte - minPlayersNumberLTE"))
}

// VictoryPoint is the resolver for the victoryPoint field.
func (r *cardWhereInputResolver) VictoryPoint(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPoint - victoryPoint"))
}

// VictoryPointNeq is the resolver for the victoryPointNEQ field.
func (r *cardWhereInputResolver) VictoryPointNeq(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointNeq - victoryPointNEQ"))
}

// VictoryPointIn is the resolver for the victoryPointIn field.
func (r *cardWhereInputResolver) VictoryPointIn(ctx context.Context, obj *ent.CardWhereInput, data []ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointIn - victoryPointIn"))
}

// VictoryPointNotIn is the resolver for the victoryPointNotIn field.
func (r *cardWhereInputResolver) VictoryPointNotIn(ctx context.Context, obj *ent.CardWhereInput, data []ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointNotIn - victoryPointNotIn"))
}

// VictoryPointGt is the resolver for the victoryPointGT field.
func (r *cardWhereInputResolver) VictoryPointGt(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointGt - victoryPointGT"))
}

// VictoryPointGte is the resolver for the victoryPointGTE field.
func (r *cardWhereInputResolver) VictoryPointGte(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointGte - victoryPointGTE"))
}

// VictoryPointLt is the resolver for the victoryPointLT field.
func (r *cardWhereInputResolver) VictoryPointLt(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointLt - victoryPointLT"))
}

// VictoryPointLte is the resolver for the victoryPointLTE field.
func (r *cardWhereInputResolver) VictoryPointLte(ctx context.Context, obj *ent.CardWhereInput, data ent.Noder) error {
	panic(fmt.Errorf("not implemented: VictoryPointLte - victoryPointLTE"))
}

// Card returns generated.CardResolver implementation.
func (r *Resolver) Card() generated.CardResolver { return &cardResolver{r} }

// CardConnection returns generated.CardConnectionResolver implementation.
func (r *Resolver) CardConnection() generated.CardConnectionResolver {
	return &cardConnectionResolver{r}
}

// CardSpecialColorConnection returns generated.CardSpecialColorConnectionResolver implementation.
func (r *Resolver) CardSpecialColorConnection() generated.CardSpecialColorConnectionResolver {
	return &cardSpecialColorConnectionResolver{r}
}

// CardTypeConnection returns generated.CardTypeConnectionResolver implementation.
func (r *Resolver) CardTypeConnection() generated.CardTypeConnectionResolver {
	return &cardTypeConnectionResolver{r}
}

// DeckConnection returns generated.DeckConnectionResolver implementation.
func (r *Resolver) DeckConnection() generated.DeckConnectionResolver {
	return &deckConnectionResolver{r}
}

// ProductConnection returns generated.ProductConnectionResolver implementation.
func (r *Resolver) ProductConnection() generated.ProductConnectionResolver {
	return &productConnectionResolver{r}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// RevisionConnection returns generated.RevisionConnectionResolver implementation.
func (r *Resolver) RevisionConnection() generated.RevisionConnectionResolver {
	return &revisionConnectionResolver{r}
}

// CardWhereInput returns generated.CardWhereInputResolver implementation.
func (r *Resolver) CardWhereInput() generated.CardWhereInputResolver {
	return &cardWhereInputResolver{r}
}

type cardResolver struct{ *Resolver }
type cardConnectionResolver struct{ *Resolver }
type cardSpecialColorConnectionResolver struct{ *Resolver }
type cardTypeConnectionResolver struct{ *Resolver }
type deckConnectionResolver struct{ *Resolver }
type productConnectionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type revisionConnectionResolver struct{ *Resolver }
type cardWhereInputResolver struct{ *Resolver }
