package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/AgricolaDevJP/agricoladb-server/ent"
	"github.com/AgricolaDevJP/agricoladb-server/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.Client.Noder(ctx, id, ent.WithNodeType(getTypeFromID))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.Client.Noders(ctx, ids, ent.WithNodeType(getTypeFromID))
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.CardWhereInput) (*ent.CardConnection, error) {
	return r.Client.Card.Query().Paginate(ctx, after, first, before, last, ent.WithCardFilter(where.Filter))
}

// CardSpecialColors is the resolver for the cardSpecialColors field.
func (r *queryResolver) CardSpecialColors(ctx context.Context) ([]*ent.CardSpecialColor, error) {
	return r.Client.CardSpecialColor.Query().All(ctx)
}

// CardTypes is the resolver for the cardTypes field.
func (r *queryResolver) CardTypes(ctx context.Context) ([]*ent.CardType, error) {
	return r.Client.CardType.Query().All(ctx)
}

// Decks is the resolver for the decks field.
func (r *queryResolver) Decks(ctx context.Context) ([]*ent.Deck, error) {
	return r.Client.Deck.Query().All(ctx)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*ent.Product, error) {
	return r.Client.Product.Query().All(ctx)
}

// Revisions is the resolver for the revisions field.
func (r *queryResolver) Revisions(ctx context.Context) ([]*ent.Revision, error) {
	return r.Client.Revision.Query().All(ctx)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
