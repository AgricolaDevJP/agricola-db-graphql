directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Card implements Node {
  id: ID!
  literalID: String!
  revisionID: ID!
  printedID: String
  playAgricolaCardID: String
  deckID: ID
  cardTypeID: ID!
  cardSpecialColorID: ID
  nameJa: String
  nameEn: String
  minPlayersNumber: Int
  prerequisite: String
  cost: String
  description: String
  note: String
  isOfficialJa: Boolean!
  victoryPoint: Int
  specialVictoryPoint: String
  hasArrow: Boolean!
  hasBonusPointIcon: Boolean!
  hasNegativeBonusPointIcon: Boolean!
  hasPanIcon: Boolean!
  hasBreadIcon: Boolean!
  hasFarmPlannerIcon: Boolean!
  hasActionsBoosterIcon: Boolean!
  hasPointsProviderIcon: Boolean!
  hasGoodsProviderIcon: Boolean!
  hasFoodProviderIcon: Boolean!
  hasCropProviderIcon: Boolean!
  hasBuildingResourceProviderIcon: Boolean!
  hasLivestockProviderIcon: Boolean!
  hasCutPeatIcon: Boolean!
  hasFellTreesIcon: Boolean!
  hasSlashAndBurnIcon: Boolean!
  hasHiringFareIcon: Boolean!
  revision: Revision!
  products: [Product!]
  deck: Deck
  cardType: CardType!
  cardSpecialColor: CardSpecialColor
  children: [Card!]
  ancestors: [Card!]
}
"""
A connection to a list of items.
"""
type CardConnection {
  """
  A list of edges.
  """
  edges: [CardEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CardEdge {
  """
  The item at the end of the edge.
  """
  node: Card
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CardSpecialColor implements Node {
  id: ID!
  key: String!
  nameJa: String
  nameEn: String
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
}
"""
CardSpecialColorWhereInput is used for filtering CardSpecialColor objects.
Input was generated by ent.
"""
input CardSpecialColorWhereInput {
  not: CardSpecialColorWhereInput
  and: [CardSpecialColorWhereInput!]
  or: [CardSpecialColorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  cards edge predicates
  """
  hasCards: Boolean
  hasCardsWith: [CardWhereInput!]
}
type CardType implements Node {
  id: ID!
  key: String!
  nameJa: String
  nameEn: String
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
}
"""
CardTypeWhereInput is used for filtering CardType objects.
Input was generated by ent.
"""
input CardTypeWhereInput {
  not: CardTypeWhereInput
  and: [CardTypeWhereInput!]
  or: [CardTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  cards edge predicates
  """
  hasCards: Boolean
  hasCardsWith: [CardWhereInput!]
}
"""
CardWhereInput is used for filtering Card objects.
Input was generated by ent.
"""
input CardWhereInput {
  not: CardWhereInput
  and: [CardWhereInput!]
  or: [CardWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  literal_id field predicates
  """
  literalID: String
  literalIDNEQ: String
  literalIDIn: [String!]
  literalIDNotIn: [String!]
  literalIDGT: String
  literalIDGTE: String
  literalIDLT: String
  literalIDLTE: String
  literalIDContains: String
  literalIDHasPrefix: String
  literalIDHasSuffix: String
  literalIDEqualFold: String
  literalIDContainsFold: String
  """
  revision_id field predicates
  """
  revisionID: ID
  revisionIDNEQ: ID
  revisionIDIn: [ID!]
  revisionIDNotIn: [ID!]
  """
  printed_id field predicates
  """
  printedID: String
  printedIDNEQ: String
  printedIDIn: [String!]
  printedIDNotIn: [String!]
  printedIDGT: String
  printedIDGTE: String
  printedIDLT: String
  printedIDLTE: String
  printedIDContains: String
  printedIDHasPrefix: String
  printedIDHasSuffix: String
  printedIDIsNil: Boolean
  printedIDNotNil: Boolean
  printedIDEqualFold: String
  printedIDContainsFold: String
  """
  play_agricola_card_id field predicates
  """
  playAgricolaCardID: String
  playAgricolaCardIDNEQ: String
  playAgricolaCardIDIn: [String!]
  playAgricolaCardIDNotIn: [String!]
  playAgricolaCardIDGT: String
  playAgricolaCardIDGTE: String
  playAgricolaCardIDLT: String
  playAgricolaCardIDLTE: String
  playAgricolaCardIDContains: String
  playAgricolaCardIDHasPrefix: String
  playAgricolaCardIDHasSuffix: String
  playAgricolaCardIDIsNil: Boolean
  playAgricolaCardIDNotNil: Boolean
  playAgricolaCardIDEqualFold: String
  playAgricolaCardIDContainsFold: String
  """
  deck_id field predicates
  """
  deckID: ID
  deckIDNEQ: ID
  deckIDIn: [ID!]
  deckIDNotIn: [ID!]
  deckIDIsNil: Boolean
  deckIDNotNil: Boolean
  """
  card_type_id field predicates
  """
  cardTypeID: ID
  cardTypeIDNEQ: ID
  cardTypeIDIn: [ID!]
  cardTypeIDNotIn: [ID!]
  """
  card_special_color_id field predicates
  """
  cardSpecialColorID: ID
  cardSpecialColorIDNEQ: ID
  cardSpecialColorIDIn: [ID!]
  cardSpecialColorIDNotIn: [ID!]
  cardSpecialColorIDIsNil: Boolean
  cardSpecialColorIDNotNil: Boolean
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  min_players_number field predicates
  """
  minPlayersNumber: Int
  minPlayersNumberNEQ: Int
  minPlayersNumberIn: [Int!]
  minPlayersNumberNotIn: [Int!]
  minPlayersNumberGT: Int
  minPlayersNumberGTE: Int
  minPlayersNumberLT: Int
  minPlayersNumberLTE: Int
  minPlayersNumberIsNil: Boolean
  minPlayersNumberNotNil: Boolean
  """
  prerequisite field predicates
  """
  prerequisite: String
  prerequisiteNEQ: String
  prerequisiteIn: [String!]
  prerequisiteNotIn: [String!]
  prerequisiteGT: String
  prerequisiteGTE: String
  prerequisiteLT: String
  prerequisiteLTE: String
  prerequisiteContains: String
  prerequisiteHasPrefix: String
  prerequisiteHasSuffix: String
  prerequisiteIsNil: Boolean
  prerequisiteNotNil: Boolean
  prerequisiteEqualFold: String
  prerequisiteContainsFold: String
  """
  cost field predicates
  """
  cost: String
  costNEQ: String
  costIn: [String!]
  costNotIn: [String!]
  costGT: String
  costGTE: String
  costLT: String
  costLTE: String
  costContains: String
  costHasPrefix: String
  costHasSuffix: String
  costIsNil: Boolean
  costNotNil: Boolean
  costEqualFold: String
  costContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """
  is_official_ja field predicates
  """
  isOfficialJa: Boolean
  isOfficialJaNEQ: Boolean
  """
  victory_point field predicates
  """
  victoryPoint: Int
  victoryPointNEQ: Int
  victoryPointIn: [Int!]
  victoryPointNotIn: [Int!]
  victoryPointGT: Int
  victoryPointGTE: Int
  victoryPointLT: Int
  victoryPointLTE: Int
  victoryPointIsNil: Boolean
  victoryPointNotNil: Boolean
  """
  special_victory_point field predicates
  """
  specialVictoryPoint: String
  specialVictoryPointNEQ: String
  specialVictoryPointIn: [String!]
  specialVictoryPointNotIn: [String!]
  specialVictoryPointGT: String
  specialVictoryPointGTE: String
  specialVictoryPointLT: String
  specialVictoryPointLTE: String
  specialVictoryPointContains: String
  specialVictoryPointHasPrefix: String
  specialVictoryPointHasSuffix: String
  specialVictoryPointIsNil: Boolean
  specialVictoryPointNotNil: Boolean
  specialVictoryPointEqualFold: String
  specialVictoryPointContainsFold: String
  """
  has_arrow field predicates
  """
  hasArrow: Boolean
  hasArrowNEQ: Boolean
  """
  has_bonus_point_icon field predicates
  """
  hasBonusPointIcon: Boolean
  hasBonusPointIconNEQ: Boolean
  """
  has_negative_bonus_point_icon field predicates
  """
  hasNegativeBonusPointIcon: Boolean
  hasNegativeBonusPointIconNEQ: Boolean
  """
  has_pan_icon field predicates
  """
  hasPanIcon: Boolean
  hasPanIconNEQ: Boolean
  """
  has_bread_icon field predicates
  """
  hasBreadIcon: Boolean
  hasBreadIconNEQ: Boolean
  """
  has_farm_planner_icon field predicates
  """
  hasFarmPlannerIcon: Boolean
  hasFarmPlannerIconNEQ: Boolean
  """
  has_actions_booster_icon field predicates
  """
  hasActionsBoosterIcon: Boolean
  hasActionsBoosterIconNEQ: Boolean
  """
  has_points_provider_icon field predicates
  """
  hasPointsProviderIcon: Boolean
  hasPointsProviderIconNEQ: Boolean
  """
  has_goods_provider_icon field predicates
  """
  hasGoodsProviderIcon: Boolean
  hasGoodsProviderIconNEQ: Boolean
  """
  has_food_provider_icon field predicates
  """
  hasFoodProviderIcon: Boolean
  hasFoodProviderIconNEQ: Boolean
  """
  has_crop_provider_icon field predicates
  """
  hasCropProviderIcon: Boolean
  hasCropProviderIconNEQ: Boolean
  """
  has_building_resource_provider_icon field predicates
  """
  hasBuildingResourceProviderIcon: Boolean
  hasBuildingResourceProviderIconNEQ: Boolean
  """
  has_livestock_provider_icon field predicates
  """
  hasLivestockProviderIcon: Boolean
  hasLivestockProviderIconNEQ: Boolean
  """
  has_cut_peat_icon field predicates
  """
  hasCutPeatIcon: Boolean
  hasCutPeatIconNEQ: Boolean
  """
  has_fell_trees_icon field predicates
  """
  hasFellTreesIcon: Boolean
  hasFellTreesIconNEQ: Boolean
  """
  has_slash_and_burn_icon field predicates
  """
  hasSlashAndBurnIcon: Boolean
  hasSlashAndBurnIconNEQ: Boolean
  """
  has_hiring_fare_icon field predicates
  """
  hasHiringFareIcon: Boolean
  hasHiringFareIconNEQ: Boolean
  """
  revision edge predicates
  """
  hasRevision: Boolean
  hasRevisionWith: [RevisionWhereInput!]
  """
  products edge predicates
  """
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """
  deck edge predicates
  """
  hasDeck: Boolean
  hasDeckWith: [DeckWhereInput!]
  """
  card_type edge predicates
  """
  hasCardType: Boolean
  hasCardTypeWith: [CardTypeWhereInput!]
  """
  card_special_color edge predicates
  """
  hasCardSpecialColor: Boolean
  hasCardSpecialColorWith: [CardSpecialColorWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [CardWhereInput!]
  """
  ancestors edge predicates
  """
  hasAncestors: Boolean
  hasAncestorsWith: [CardWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Deck implements Node {
  id: ID!
  key: String!
  revisionID: ID!
  nameJa: String
  nameEn: String
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
  revision: Revision!
}
"""
DeckWhereInput is used for filtering Deck objects.
Input was generated by ent.
"""
input DeckWhereInput {
  not: DeckWhereInput
  and: [DeckWhereInput!]
  or: [DeckWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  revision_id field predicates
  """
  revisionID: ID
  revisionIDNEQ: ID
  revisionIDIn: [ID!]
  revisionIDNotIn: [ID!]
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  cards edge predicates
  """
  hasCards: Boolean
  hasCardsWith: [CardWhereInput!]
  """
  revision edge predicates
  """
  hasRevision: Boolean
  hasRevisionWith: [RevisionWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/AgricolaDevJP/agricoladb-server/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  revisionID: ID!
  isOfficialJa: Boolean!
  nameJa: String
  nameEn: String
  publishedYear: Int
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
  revision: Revision!
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  revision_id field predicates
  """
  revisionID: ID
  revisionIDNEQ: ID
  revisionIDIn: [ID!]
  revisionIDNotIn: [ID!]
  """
  is_official_ja field predicates
  """
  isOfficialJa: Boolean
  isOfficialJaNEQ: Boolean
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  published_year field predicates
  """
  publishedYear: Int
  publishedYearNEQ: Int
  publishedYearIn: [Int!]
  publishedYearNotIn: [Int!]
  publishedYearGT: Int
  publishedYearGTE: Int
  publishedYearLT: Int
  publishedYearLTE: Int
  publishedYearIsNil: Boolean
  publishedYearNotNil: Boolean
  """
  cards edge predicates
  """
  hasCards: Boolean
  hasCardsWith: [CardWhereInput!]
  """
  revision edge predicates
  """
  hasRevision: Boolean
  hasRevisionWith: [RevisionWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
  cardSpecialColors: [CardSpecialColor!]!
  cardTypes: [CardType!]!
  decks: [Deck!]!
  products: [Product!]!
  revisions: [Revision!]!
}
type Revision implements Node {
  id: ID!
  key: String!
  nameJa: String
  nameEn: String
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cards returned from the connection.
    """
    where: CardWhereInput
  ): CardConnection!
  products: [Product!]
  decks: [Deck!]
}
"""
RevisionWhereInput is used for filtering Revision objects.
Input was generated by ent.
"""
input RevisionWhereInput {
  not: RevisionWhereInput
  and: [RevisionWhereInput!]
  or: [RevisionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name_ja field predicates
  """
  nameJa: String
  nameJaNEQ: String
  nameJaIn: [String!]
  nameJaNotIn: [String!]
  nameJaGT: String
  nameJaGTE: String
  nameJaLT: String
  nameJaLTE: String
  nameJaContains: String
  nameJaHasPrefix: String
  nameJaHasSuffix: String
  nameJaIsNil: Boolean
  nameJaNotNil: Boolean
  nameJaEqualFold: String
  nameJaContainsFold: String
  """
  name_en field predicates
  """
  nameEn: String
  nameEnNEQ: String
  nameEnIn: [String!]
  nameEnNotIn: [String!]
  nameEnGT: String
  nameEnGTE: String
  nameEnLT: String
  nameEnLTE: String
  nameEnContains: String
  nameEnHasPrefix: String
  nameEnHasSuffix: String
  nameEnIsNil: Boolean
  nameEnNotNil: Boolean
  nameEnEqualFold: String
  nameEnContainsFold: String
  """
  cards edge predicates
  """
  hasCards: Boolean
  hasCardsWith: [CardWhereInput!]
  """
  products edge predicates
  """
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """
  decks edge predicates
  """
  hasDecks: Boolean
  hasDecksWith: [DeckWhereInput!]
}
