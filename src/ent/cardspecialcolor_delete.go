// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AgricolaDevJP/agricoladb-server/ent/cardspecialcolor"
	"github.com/AgricolaDevJP/agricoladb-server/ent/predicate"
)

// CardSpecialColorDelete is the builder for deleting a CardSpecialColor entity.
type CardSpecialColorDelete struct {
	config
	hooks    []Hook
	mutation *CardSpecialColorMutation
}

// Where appends a list predicates to the CardSpecialColorDelete builder.
func (cscd *CardSpecialColorDelete) Where(ps ...predicate.CardSpecialColor) *CardSpecialColorDelete {
	cscd.mutation.Where(ps...)
	return cscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cscd *CardSpecialColorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CardSpecialColorMutation](ctx, cscd.sqlExec, cscd.mutation, cscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cscd *CardSpecialColorDelete) ExecX(ctx context.Context) int {
	n, err := cscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cscd *CardSpecialColorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cardspecialcolor.Table, sqlgraph.NewFieldSpec(cardspecialcolor.FieldID, field.TypeInt))
	if ps := cscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cscd.mutation.done = true
	return affected, err
}

// CardSpecialColorDeleteOne is the builder for deleting a single CardSpecialColor entity.
type CardSpecialColorDeleteOne struct {
	cscd *CardSpecialColorDelete
}

// Where appends a list predicates to the CardSpecialColorDelete builder.
func (cscdo *CardSpecialColorDeleteOne) Where(ps ...predicate.CardSpecialColor) *CardSpecialColorDeleteOne {
	cscdo.cscd.mutation.Where(ps...)
	return cscdo
}

// Exec executes the deletion query.
func (cscdo *CardSpecialColorDeleteOne) Exec(ctx context.Context) error {
	n, err := cscdo.cscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cardspecialcolor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cscdo *CardSpecialColorDeleteOne) ExecX(ctx context.Context) {
	if err := cscdo.Exec(ctx); err != nil {
		panic(err)
	}
}
